<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="КУДиР" enabled="true"/>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Получение списка КУДиР " enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Получение списка КУДИР УСН " enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Ручная дата начала расчета налога текущий" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Получение списка КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;КУДиР для активного клиента на УСН. Ручная дата начала расчета налога = текущий год&quot;);  
vars.put(&quot;AllureManualID&quot;,&quot;16813&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\nПеред скачивание КУДиР нужно получить список доступных книг - для этого используется метод [revenue_book_list](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book_list.md)\\n\\n В качестве начальной даты используется дата начала расчётов: сначала ручная, потом автоматическая.&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); 
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">select oc.customer_code
	from orders_company oc left join patent_patent pp on oc.id =pp.company_id 
where  pp.id is null and oc.closing_date is null and oc.is_active is true and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in 
		(&apos;ИП на УСН Доходы&apos;)) and oc.tax_calc_start_date =&apos;${__time(yyyy,)}-01-01&apos; 
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем список КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book_list&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем год в ответе = ${__time(yyyy,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result..year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__time(yyyy,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем заголовок в ответе = &apos;КУДиР по УСН за ${__time(yyyy,)}&apos;" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__time(yyyy,)}&apos;)].title</stringProp>
                  <stringProp name="EXPECTED_VALUE">КУДиР по УСН за ${__time(yyyy,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем что нет другого года в ответе" enabled="true">
                  <stringProp name="JSON_PATH">.result..year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__timeShift(yyyy,,-P365D,,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">true</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем что в ответе есть КУДИР для УСН" enabled="true">
                  <stringProp name="JSON_PATH">.result..book_type</stringProp>
                  <stringProp name="EXPECTED_VALUE">usn</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем что в ответе нет КУДИРа для Патента" enabled="true">
                  <stringProp name="JSON_PATH">.result..book_type</stringProp>
                  <stringProp name="EXPECTED_VALUE">patent</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">true</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="КУДиР для активного клиента на УСН Д-Р. Ручная дата начала расчета налога = прошлый год, автоматическая дата = текущий год" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Получение списка КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;КУДиР для активного клиента на УСН Д-Р. Ручная дата начала расчета налога = прошлый год, автоматическая дата = текущий год&quot;);  
vars.put(&quot;AllureManualID&quot;,&quot;16810&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\nПеред скачивание КУДиР нужно получить список доступных книг - для этого используется метод [revenue_book_list](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book_list.md)\\n\\n В качестве начальной даты используется дата начала расчётов: сначала ручная, потом автоматическая.&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); </stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">
select oc.customer_code
	from orders_company oc left join patent_patent pp on oc.id =pp.company_id 
where  pp.id is null and  oc.closing_date is null and oc.is_active is true and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description =&apos;ИП на УСН Д-Р&apos;) 
		and oc.tax_calc_start_date =&apos;${__timeShift(yyyy,,-P365D,,)}-01-01&apos; and oc.tax_calc_start_date_auto =&apos;${__time(yyyy,)}-01-01&apos;
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем список КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book_list&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем год в ответе = ${__time(yyyy,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result..year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__time(yyyy,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем заголовок в ответе для ${__time(yyyy,)} года - КУДиР по УСН за ${__time(yyyy,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__time(yyyy,)}&apos;)].title</stringProp>
                  <stringProp name="EXPECTED_VALUE">КУДиР по УСН за ${__time(yyyy,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем год в ответе = ${__timeShift(yyyy,,-P365D,,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result..year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__timeShift(yyyy,,-P365D,,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем заголовок в ответе для ${__timeShift(yyyy,,-P365D,,)} года - КУДиР по УСН за ${__timeShift(yyyy,,-P365D,,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__timeShift(yyyy,,-P365D,,)}&apos;)].title</stringProp>
                  <stringProp name="EXPECTED_VALUE">КУДиР по УСН за ${__timeShift(yyyy,,-P365D,,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем что нет другого года в ответе" enabled="true">
                  <stringProp name="JSON_PATH">.result..year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__timeShift(yyyy,,-P730D,,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">true</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем что в ответе нет КУДИРа для Патента" enabled="true">
                  <stringProp name="JSON_PATH">.result..book_type</stringProp>
                  <stringProp name="EXPECTED_VALUE">patent</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">true</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Ручная дата начала расчета налога = текущий, автоматическая дата = прошлый" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Получение списка КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;КУДиР для активного клиента. Ручная дата начала расчета налога = текущий, автоматическая дата = прошлый год&quot;);  
vars.put(&quot;AllureManualID&quot;,&quot;16811&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\nПеред скачивание КУДиР нужно получить список доступных книг - для этого используется метод [revenue_book_list](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book_list.md)\\n\\n В качестве начальной даты используется дата начала расчётов: сначала ручная, потом автоматическая.&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); </stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">
select oc.customer_code
	from orders_company oc left join patent_patent pp on oc.id =pp.company_id 
where  pp.id is null and oc.closing_date is null 
	and oc.is_active is true
	and oc.tax_calc_start_date =&apos;${__time(yyyy,)}-01-01&apos; and oc.tax_calc_start_date_auto =&apos;${__timeShift(yyyy,,-P365D,,)}-01-01&apos;
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем список КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book_list&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем год в ответе = ${__time(yyyy,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result..year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__time(yyyy,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем заголовок в ответе для ${__time(yyyy,)} года - КУДиР по УСН за ${__time(yyyy,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__time(yyyy,)}&apos;)].title</stringProp>
                  <stringProp name="EXPECTED_VALUE">КУДиР по УСН за ${__time(yyyy,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем что нет другого года в ответе" enabled="true">
                  <stringProp name="JSON_PATH">.result..year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__timeShift(yyyy,,-P365D,,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">true</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем что в ответе нет КУДИРа для Патента" enabled="true">
                  <stringProp name="JSON_PATH">.result..book_type</stringProp>
                  <stringProp name="EXPECTED_VALUE">patent</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">true</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Ручная и автоматическая дата начала расчета налога = 2020" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Получение списка КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;КУДиР для активного клиента на УСН. Ручная и автоматическая дата начала расчета налога позапрошлый год&quot;);  
vars.put(&quot;AllureManualID&quot;,&quot;16814&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\nПеред скачивание КУДиР нужно получить список доступных книг - для этого используется метод [revenue_book_list](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book_list.md)\\n\\n В качестве начальной даты используется дата начала расчётов: сначала ручная, потом автоматическая.&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); </stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">
select oc.customer_code
	from orders_company oc left join patent_patent pp on oc.id =pp.company_id 
where  pp.id is null and  oc.closing_date is null and oc.is_active is true and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in (
		&apos;ИП на УСН Доходы&apos;,
		&apos;ИП на УСН 6% (Патент)&apos;,
		&apos;ИП на УСН 6% (ЕНВД)&apos;,
		&apos;ИП на УСН Д-Р&apos;)
	)
		and oc.tax_calc_start_date =&apos;${__timeShift(yyyy,,-P730D,,)}-01-01&apos; and oc.tax_calc_start_date_auto =&apos;${__timeShift(yyyy,,-P730D,,)}-01-01&apos;
order by random() limit 1;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем список КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book_list&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем год в ответе = ${__time(yyyy,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result..year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__time(yyyy,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем заголовок в ответе для ${__time(yyyy,)} года - КУДиР по УСН за ${__time(yyyy,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__time(yyyy,)}&apos;)].title</stringProp>
                  <stringProp name="EXPECTED_VALUE">КУДиР по УСН за ${__time(yyyy,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем год в ответе = ${__timeShift(yyyy,,-P365D,,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result..year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__timeShift(yyyy,,-P365D,,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем заголовок в ответе для ${__timeShift(yyyy,,-P365D,,)} года - КУДиР по УСН за ${__timeShift(yyyy,,-P365D,,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__timeShift(yyyy,,-P365D,,)}&apos;)].title</stringProp>
                  <stringProp name="EXPECTED_VALUE">КУДиР по УСН за ${__timeShift(yyyy,,-P365D,,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем год в ответе = ${__timeShift(yyyy,,-P730D,,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result..year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__timeShift(yyyy,,-P730D,,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем заголовок в ответе для ${__timeShift(yyyy,,-P730D,,)} года - КУДиР по УСН за ${__timeShift(yyyy,,-P730D,,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__timeShift(yyyy,,-P730D,,)}&apos;)].title</stringProp>
                  <stringProp name="EXPECTED_VALUE">КУДиР по УСН за ${__timeShift(yyyy,,-P730D,,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем что в ответе нет КУДИРа для Патента" enabled="true">
                  <stringProp name="JSON_PATH">.result..book_type</stringProp>
                  <stringProp name="EXPECTED_VALUE">patent</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">true</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Ручная дата начала расчета не установлена" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Получение списка КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;КУДиР для активного клиента на УСН. Ручная дата начала расчета не установлена&quot;);  
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\nПеред скачивание КУДиР нужно получить список доступных книг - для этого используется метод [revenue_book_list](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book_list.md)\\n\\n В качестве начальной даты используется дата начала расчётов: сначала ручная, потом автоматическая.&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); </stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">		
		
select oc.customer_code
	from orders_company oc left join patent_patent pp on oc.id =pp.company_id 
where  pp.id is null and  oc.closing_date is null and oc.is_active is true and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in (
		&apos;ИП на УСН Доходы&apos;,
		&apos;ИП на УСН 6% (Патент)&apos;,
		&apos;ИП на УСН 6% (ЕНВД)&apos;,
		&apos;ИП на УСН Д-Р&apos;)
	)
		and oc.tax_calc_start_date is null and oc.tax_calc_start_date_auto =&apos;${__timeShift(yyyy,,-P730D,,)}-01-01&apos;
order by random() limit 1;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем список КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book_list&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем год в ответе = ${__time(yyyy,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result..year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__time(yyyy,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем заголовок в ответе для  ${__time(yyyy,)} года - КУДиР по УСН за ${__time(yyyy,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__time(yyyy,)}&apos;)].title</stringProp>
                  <stringProp name="EXPECTED_VALUE">КУДиР по УСН за ${__time(yyyy,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем год в ответе = ${__timeShift(yyyy,,-P365D,,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__timeShift(yyyy,,-P365D,,)}&apos;)].year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__timeShift(yyyy,,-P365D,,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем заголовок в ответе для ${__timeShift(yyyy,,-P365D,,)} года - КУДиР по УСН за ${__timeShift(yyyy,,-P365D,,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__timeShift(yyyy,,-P365D,,)}&apos;)].title</stringProp>
                  <stringProp name="EXPECTED_VALUE">КУДиР по УСН за ${__timeShift(yyyy,,-P365D,,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем год в ответе = ${__timeShift(yyyy,,-P730D,,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__timeShift(yyyy,,-P730D,,)}&apos;)].year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__timeShift(yyyy,,-P730D,,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем заголовок в ответе для ${__timeShift(yyyy,,-P730D,,)} года - КУДиР по УСН за ${__timeShift(yyyy,,-P730D,,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__timeShift(yyyy,,-P730D,,)}&apos;)].title</stringProp>
                  <stringProp name="EXPECTED_VALUE">КУДиР по УСН за ${__timeShift(yyyy,,-P730D,,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем что в ответе нет КУДИРа для Патента" enabled="true">
                  <stringProp name="JSON_PATH">.result..book_type</stringProp>
                  <stringProp name="EXPECTED_VALUE">patent</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">true</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Ручная и автоматическая дата начала расчета не установлена" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Получение списка КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;КУДиР для активного клиента на УСН. Ручная и автоматическая дата начала расчета не установлена&quot;);  
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\nПеред скачивание КУДиР нужно получить список доступных книг - для этого используется метод [revenue_book_list](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book_list.md)\\n\\n В качестве начальной даты используется дата начала расчётов: сначала ручная, потом автоматическая.&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); </stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">		
select oc.customer_code
	from orders_company oc left join patent_patent pp on oc.id =pp.company_id 
where  pp.id is null and  oc.closing_date is null and oc.is_active is true and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in (
		&apos;ИП на УСН Доходы&apos;,
		&apos;ИП на УСН 6% (Патент)&apos;,
		&apos;ИП на УСН 6% (ЕНВД)&apos;,
		&apos;ИП на УСН Д-Р&apos;)
	)
		and oc.tax_calc_start_date is null and oc.tax_calc_start_date_auto is null and incorporation_date between &apos;${__timeShift(yyyy,,-P730D,,)}-01-01&apos; and &apos;${__timeShift(yyyy,,-P730D,,)}-12-31&apos;
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем список КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book_list&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем год в ответе = ${__time(yyyy,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result..year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__time(yyyy,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем заголовок в ответе для ${__time(yyyy,)} года - КУДиР по УСН за ${__time(yyyy,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__time(yyyy,)}&apos;)].title</stringProp>
                  <stringProp name="EXPECTED_VALUE">КУДиР по УСН за ${__time(yyyy,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем год в ответе = ${__timeShift(yyyy,,-P365D,,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__timeShift(yyyy,,-P365D,,)}&apos;)].year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__timeShift(yyyy,,-P365D,,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем заголовок в ответе для ${__timeShift(yyyy,,-P365D,,)} года - КУДиР по УСН за ${__timeShift(yyyy,,-P365D,,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__timeShift(yyyy,,-P365D,,)}&apos;)].title</stringProp>
                  <stringProp name="EXPECTED_VALUE">КУДиР по УСН за ${__timeShift(yyyy,,-P365D,,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем год в ответе = ${__timeShift(yyyy,,-P730D,,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__timeShift(yyyy,,-P730D,,)}&apos;)].year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__timeShift(yyyy,,-P730D,,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем заголовок в ответе для ${__timeShift(yyyy,,-P730D,,)} года - КУДиР по УСН за ${__timeShift(yyyy,,-P730D,,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__timeShift(yyyy,,-P730D,,)}&apos;)].title</stringProp>
                  <stringProp name="EXPECTED_VALUE">КУДиР по УСН за ${__timeShift(yyyy,,-P730D,,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем что в ответе нет КУДИРа для Патента" enabled="true">
                  <stringProp name="JSON_PATH">.result..book_type</stringProp>
                  <stringProp name="EXPECTED_VALUE">patent</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">true</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Ручная дата начала расчета налога -4 года" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Получение списка КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;КУДиР для активного клиента на УСН. Ручная дата начала расчета налога -4 года&quot;);  
vars.put(&quot;AllureManualID&quot;,&quot;16813&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\nПеред скачивание КУДиР нужно получить список доступных книг - для этого используется метод [revenue_book_list](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book_list.md)\\n\\n Метод возвращает КУДиР с даты начала расчётов, но не старше последних трёх лет. В качестве начальной даты используется дата начала расчётов: сначала ручная, потом автоматическая.\\n\\n&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); 
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">select oc.customer_code
	from orders_company oc left join patent_patent pp on oc.id =pp.company_id 
where  pp.id is null and oc.closing_date is null and oc.is_active is true and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in 
		(&apos;ИП на УСН Доходы&apos;)) and oc.tax_calc_start_date =&apos;${__timeShift(yyyy,,-P1095D,,)}-01-01&apos; 
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем список КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book_list&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем, что в ответе есть последние 3 года: ${__time(yyyy,)}, ${__timeShift(yyyy,,-P365D,,)}, ${__timeShift(yyyy,,-P730D,,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*]..year</stringProp>
                  <stringProp name="EXPECTED_VALUE">[${__time(yyyy,)},${__timeShift(yyyy,,-P365D,,)},${__timeShift(yyyy,,-P730D,,)}]</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Получение списка КУДИР Патент " enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="КУДиР для активного клиента на УСН с добавленным патентом за текущий год" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Получение списка КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;КУДиР для активного клиента на УСН с добавленным патентом за текущий год&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\nПеред скачивание КУДиР нужно получить список доступных книг - для этого используется метод [revenue_book_list](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book_list.md). Если у клиента в каком-то году был патент и он не помечен как удаленный, то метод отдаст для этого года возможность скачать КУДиР по Патенту.\\n\\n В качестве начальной даты используется дата начала расчётов: сначала ручная, потом автоматическая.&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); 
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем клиента в БД с датой начала расчетов в этом году и с действующем патентом" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">select oc.customer_code
	from orders_company oc join patent_patent pp on oc.id =pp.company_id 
where  pp.start_date &gt;&apos;${__time(yyyy,)}-01-01&apos; and pp.deactivated is false and oc.closing_date is null and oc.is_active is true and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in 
		(&apos;ИП на УСН Доходы&apos;))
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем список КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book_list&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем год в ответе = ${__time(yyyy,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result..year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__time(yyyy,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем что в ответе есть КУДИР для УСН и Патента за текущий год" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__time(yyyy,)}&apos;)].book_type</stringProp>
                  <stringProp name="EXPECTED_VALUE">[&quot;usn&quot;,&quot;patent&quot;]</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем заголовок в ответе для ${__time(yyyy,)} года - КУДиР по Патенту за ${__time(yyyy,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year ==&apos;${__time(yyyy,)}&apos; &amp;&amp; @.book_type==&apos;patent&apos;)].title</stringProp>
                  <stringProp name="EXPECTED_VALUE">КУДиР по Патенту за ${__time(yyyy,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="КУДиР для активного клиента на УСН с добавленным патентом за прошлый год" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Получение списка КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;КУДиР для активного клиента на УСН с добавленным патентом за прошлый год&quot;); 
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\nПеред скачивание КУДиР нужно получить список доступных книг - для этого используется метод [revenue_book_list](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book_list.md). Если у клиента в каком-то году был патент и он не помечен как удаленный, то метод отдаст для этого года возможность скачать КУДиР по Патенту.\\n\\n В качестве начальной даты используется дата начала расчётов: сначала ручная, потом автоматическая.&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); </stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">select oc.customer_code
	from orders_company oc join patent_patent pp on oc.id =pp.company_id 
where  pp.start_date BETWEEN &apos;${__timeShift(yyyy,,-P365D,,)}-01-01&apos; and &apos;${__timeShift(yyyy,,-P365D,,)}-12-31&apos; 
and pp.deactivated is false and oc.closing_date is null
and oc.is_active is true and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in 
		(&apos;ИП на УСН Доходы&apos;)) and oc.tax_calc_start_date =&apos;${__timeShift(yyyy,,-P365D,,)}-01-01&apos; 
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем список КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book_list&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем, что в ответе есть КУДиР за ${__time(yyyy,)} год" enabled="true">
                  <stringProp name="JSON_PATH">.result..year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__time(yyyy,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем что в ответе есть КУДИР для Патента за прошлый год" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__timeShift(yyyy,,-P365D,,)}&apos;)].book_type</stringProp>
                  <stringProp name="EXPECTED_VALUE">patent</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем заголовок в ответе для ${__timeShift(yyyy,,-P365D,,)} года - КУДиР по Патенту за ${__timeShift(yyyy,,-P365D,,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year ==&apos;${__timeShift(yyyy,,-P365D,,)}&apos; &amp;&amp; @.book_type==&apos;patent&apos;)].title</stringProp>
                  <stringProp name="EXPECTED_VALUE">КУДиР по Патенту за ${__timeShift(yyyy,,-P365D,,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="КУДиР для активного клиента на УСН с удаленным патентом за текущий год" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Получение списка КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;КУДиР для активного клиента на УСН с удаленным патентом за текущий год&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\nПеред скачивание КУДиР нужно получить список доступных книг - для этого используется метод [revenue_book_list](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book_list.md). Если у клиента в каком-то году был патент и он не помечен как удаленный, то метод отдаст для этого года возможность скачать КУДиР по Патенту.\\n\\n В качестве начальной даты используется дата начала расчётов: сначала ручная, потом автоматическая.&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); 
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем клиента в БД с удалённым патентом за текущий год" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">with st as (select oc.customer_code, array_agg(pp.deactivated) as deactivated
	from orders_company oc join patent_patent pp on oc.id =pp.company_id 
where  pp.start_date &gt;&apos;${__time(yyyy,)}-01-01&apos;  and oc.closing_date is null and oc.is_active is true 
and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in 
		(&apos;ИП на УСН Доходы&apos;))
		group by oc.customer_code)
select *
from st
where  not(&apos;false&apos; =  any (deactivated))
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-804001588">customer_code deactivated
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем список КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book_list&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем год в ответе = ${__time(yyyy,)}" enabled="true">
                  <stringProp name="JSON_PATH">.result..year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__time(yyyy,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем заголовок в ответе = &apos;КУДиР по УСН за ${__time(yyyy,)}&apos;" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__time(yyyy,)}&apos;)].title</stringProp>
                  <stringProp name="EXPECTED_VALUE">КУДиР по УСН за ${__time(yyyy,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем список КУДиРов в ответе - usn" enabled="true">
                  <stringProp name="JSON_PATH">.result.[*].[?(@.year == &apos;${__time(yyyy,)}&apos;)].book_type</stringProp>
                  <stringProp name="EXPECTED_VALUE">usn</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Валидация" enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="КУДиР для некорректного  кода клиента" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Получение списка КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;КУДиР для некорректного кода клиента&quot;);   
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\nПеред скачивание КУДиР нужно получить список доступных книг - для этого используется метод [revenue_book_list](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book_list.md)&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); </stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">select oc.customer_code
	from orders_company oc  
where oc.closing_date is null and oc.is_active is false and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description like &apos;%ОСНО%&apos;)
order by random() limit 1;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем список КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book_list&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}1&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код  ошибки в ответе = customer_not_found" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..code</stringProp>
                  <stringProp name="EXPECTED_VALUE">customer_not_found</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код клиента в ответе" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..meta.customer_code</stringProp>
                  <stringProp name="EXPECTED_VALUE">${customer_code_1}1</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="КУДиР с пустым кодом клиента" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Получение списка КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;КУДиР с пустым кодом клиента&quot;);  
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\nПеред скачивание КУДиР нужно получить список доступных книг - для этого используется метод [revenue_book_list](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book_list.md)&quot;); 
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); </stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем список КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book_list&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код  ошибки в ответе = customer_not_found" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..code</stringProp>
                  <stringProp name="EXPECTED_VALUE">customer_not_found</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код клиента в ответе" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..meta.customer_code</stringProp>
                  <stringProp name="EXPECTED_VALUE"></stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="КУДиР без кода клиента" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Получение списка КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;КУДиР без кода клиента&quot;);   
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\nПеред скачивание КУДиР нужно получить список доступных книг - для этого используется метод [revenue_book_list](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book_list.md)&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); </stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем список КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book_list&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}1&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код  ошибки в ответе = customer_not_found" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..code</stringProp>
                  <stringProp name="EXPECTED_VALUE">customer_not_found</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="КУДиР для неактивного клиента на ОСНО" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Получение списка КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;КУДиР для неактивного клиента на ОСНО&quot;);  
vars.put(&quot;AllureManualID&quot;,&quot;16809&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\nПеред скачивание КУДиР нужно получить список доступных книг - для этого используется метод [revenue_book_list](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book_list.md)&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); </stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">select oc.customer_code
	from orders_company oc  
where oc.closing_date is null and oc.is_active is false and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description like &apos;%ОСНО%&apos;)
order by random() limit 1;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем список КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book_list&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код  ошибки в ответе = revenue_book_feature_not_available" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..code</stringProp>
                  <stringProp name="EXPECTED_VALUE">revenue_book_feature_not_available</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код клиента в ответе" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..meta.customer_code</stringProp>
                  <stringProp name="EXPECTED_VALUE">${customer_code_1}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="КУДиР для клиента на УСН. С неактивным расчетом" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Получение списка КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;КУДиР для клиента на УСН. С неактивным расчетом&quot;);  
vars.put(&quot;AllureManualID&quot;,&quot;16812&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\nПеред скачивание КУДиР нужно получить список доступных книг - для этого используется метод [revenue_book_list](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book_list.md)&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); </stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">select oc.customer_code
	from orders_company oc  
where oc.closing_date is null and oc.is_active is false and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in 
		(&apos;ИП на УСН Доходы&apos;)) and oc.tax_calc_start_date =&apos;${__time(yyyy,)}-01-01&apos;
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем список КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book_list&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код  ошибки в ответе = revenue_book_feature_not_available" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..code</stringProp>
                  <stringProp name="EXPECTED_VALUE">revenue_book_feature_not_available</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код клиента в ответе" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..meta.customer_code</stringProp>
                  <stringProp name="EXPECTED_VALUE">${customer_code_1}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Скачивание КУДиР" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Скачивание КУДиР УСН " enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="УСН Доходы. КУДиР за текущий год. Ручная дата начала расчета налога текуйщий год" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Скачивание КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;УСН Доходы. КУДиР за текущий год. Ручная дата начала расчета налога текущий год&quot;);  
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\n Для скачивания КУДиР используется метод [revenue_book](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book.md). В ответ может прийти ссылка на книгу или null, если не смогли сформировать книгу в моменте.&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;);  

/*
 * to create case report with single step
 * do not use parameters start/continue/stop
 * and do not create variable AllureCaseName
 */</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">select oc.customer_code
	from orders_company oc  
where oc.closing_date is null and oc.is_active is true and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in 
		(&apos;ИП на УСН Доходы&apos;)) and oc.tax_calc_start_date = &apos;${__time(yyyy)}-01-01&apos;
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;,&#xd;
        &quot;year&quot;: ${__time(yyyy)},&#xd;
        &quot;book_type&quot;: &quot;usn&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что в ответ получили ссылку на скачивание" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1956301459">{&quot;result&quot;: {&quot;url&quot;: &quot;https://${__lowercase(${__P(layer)})}-tochka15.bank24.int/api/v1/skrepka/s3/revenue_book/</stringProp>
                    <stringProp name="-461044731">{&quot;result&quot;: {&quot;url&quot;: &quot;null</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="УСН Доходы. КУДиР за прошлый год. Ручная дата начала расчета налога текущий год" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Скачивание КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;УСН Доходы. КУДиР за прошлый год. Ручная дата начала расчета налога текущий год&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\n Для скачивания КУДиР используется метод [revenue_book](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book.md). В ответ может прийти ссылка на книгу или null, если не смогли сформировать книгу в моменте.&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); 

/*
 * to create case report with single step
 * do not use parameters start/continue/stop
 * and do not create variable AllureCaseName
 */</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">select oc.customer_code
	from orders_company oc  
where oc.closing_date is null and oc.is_active is true and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in 
		(&apos;ИП на УСН Доходы&apos;)) and oc.tax_calc_start_date = &apos;${__time(yyyy)}-01-01&apos;
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;,&#xd;
        &quot;year&quot;: ${__timeShift(yyyy,,-P366D,,)} ,&#xd;
        &quot;book_type&quot;: &quot;usn&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код ошибки" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..code</stringProp>
                  <stringProp name="EXPECTED_VALUE">invalid_parameter</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем описание ошибки" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..message</stringProp>
                  <stringProp name="EXPECTED_VALUE">Not in range</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем причину ошибки" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..object_name</stringProp>
                  <stringProp name="EXPECTED_VALUE">year</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="УСН Д-Р. КУДиР за текущий год. Ручная дата начала расчета налога текущий" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Скачивание КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;УСН Д-Р. КУДиР за текущий год. Ручная дата начала расчета налога текущий год&quot;);   
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\n Для скачивания КУДиР используется метод [revenue_book](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book.md). В ответ может прийти ссылка на книгу или null, если не смогли сформировать книгу в моменте.&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); 


/*
 * to create case report with single step
 * do not use parameters start/continue/stop
 * and do not create variable AllureCaseName
 */</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">select oc.customer_code
	from orders_company oc  
where oc.closing_date is null and oc.is_active is true and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in 
		(&apos;ИП на УСН Д-Р&apos;)) and oc.tax_calc_start_date = &apos;${__time(yyyy)}-01-01&apos;
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;,&#xd;
        &quot;year&quot;: ${__time(yyyy)},&#xd;
        &quot;book_type&quot;: &quot;usn&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что в ответ получили ссылку на скачивание" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1956301459">{&quot;result&quot;: {&quot;url&quot;: &quot;https://${__lowercase(${__P(layer)})}-tochka15.bank24.int/api/v1/skrepka/s3/revenue_book/</stringProp>
                    <stringProp name="-461044731">{&quot;result&quot;: {&quot;url&quot;: &quot;null</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="УСН. КУДиР с &gt;1к операций" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Скачивание КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;УСН. КУДиР с &gt;1к операций&quot;);

/*
 * to create case report with single step
 * do not use parameters start/continue/stop
 * and do not create variable AllureCaseName
 */</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">		
with st as (
select oc.customer_code, count(ob.id) as cnt
from orders_bankorder ob 
inner join orders_account oa on (oa.id = ob.account_id)
inner join orders_company oc on (oc.id = oa.company_id)
where oc.tax_regime_id in (
    select ot.id from orders_taxregime ot where  ot.description in 
		(&apos;ИП на УСН 6% (ЕНВД)&apos;,
		&apos;ИП на УСН 6% (Патент)&apos;,
		&apos;ИП на УСН Д-Р&apos;,
		&apos;ИП на УСН Доходы&apos;)
)
and ob.calc_date &gt;= &apos;${__timeShift(yyyy,,-P365D,,)}-01-01&apos;
and ob.calc_date &lt; &apos;${__time(yyyy,)}-01-01&apos;
group by oc.id
)  
            select *
from st
where  (cnt&gt;1000)   
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;,&#xd;
        &quot;year&quot;: ${__timeShift(yyyy,,-P365D,,)}&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что в ответ получили ссылку на скачивание" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1956301459">{&quot;result&quot;: {&quot;url&quot;: &quot;https://${__lowercase(${__P(layer)})}-tochka15.bank24.int/api/v1/skrepka/s3/revenue_book/</stringProp>
                    <stringProp name="-461044731">{&quot;result&quot;: {&quot;url&quot;: &quot;null</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Скачивание КУДиР Патент " enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="УСН Доходы. КУДиР по Патенту за текущий год" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Скачивание КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;УСН Доходы. КУДиР по Патенту за текущий год.&quot;);   
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\n Для скачивания КУДиР используется метод [revenue_book](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book.md). В ответ может прийти ссылка на книгу или null, если не смогли сформировать книгу в моменте.&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); 
/*
 * to create case report with single step
 * do not use parameters start/continue/stop
 * and do not create variable AllureCaseName
 */</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">with st as (select oc.customer_code, array_agg(pp.deactivated) as deactivated
	from orders_company oc join patent_patent pp on oc.id =pp.company_id 
where  pp.start_date &gt;&apos;${__time(yyyy,)}-01-01&apos;  and oc.closing_date is null and oc.is_active is true 
and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in 
		(&apos;ИП на УСН Доходы&apos;))
		group by oc.customer_code)
select *
from st
where  not(&apos;true&apos; =  any (deactivated))
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;,&#xd;
        &quot;year&quot;: ${__time(yyyy)},&#xd;
        &quot;book_type&quot;: &quot;patent&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что в ответ получили ссылку на скачивание - https://${__lowercase(${__P(layer)})}-tochka15.bank24.int/api/v1/skrepka/s3/revenue_book/" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1956301459">{&quot;result&quot;: {&quot;url&quot;: &quot;https://${__lowercase(${__P(layer)})}-tochka15.bank24.int/api/v1/skrepka/s3/revenue_book/</stringProp>
                    <stringProp name="-461044731">{&quot;result&quot;: {&quot;url&quot;: &quot;null</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="УСН Доходы. КУДиР по Патенту за прошлый год" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Скачивание КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;УСН Доходы. КУДиР по Патенту за прошлый год.&quot;);   
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\n Для скачивания КУДиР используется метод [revenue_book](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book.md). В ответ может прийти ссылка на книгу или null, если не смогли сформировать книгу в моменте.&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); 

/*
 * to create case report with single step
 * do not use parameters start/continue/stop
 * and do not create variable AllureCaseName
 */</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">with st as (select oc.customer_code, array_agg(pp.deactivated) as deactivated
	from orders_company oc join patent_patent pp on oc.id =pp.company_id 
where  pp.start_date BETWEEN &apos;${__timeShift(yyyy,,-P365D,,)}-01-01&apos; and &apos;${__timeShift(yyyy,,-P365D,,)}-12-31&apos;
and oc.closing_date is null and oc.is_active is true 
and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in 
		(&apos;ИП на УСН Доходы&apos;))
		group by oc.customer_code)
select *
from st
where  not(&apos;true&apos; =  any (deactivated))
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;,&#xd;
        &quot;year&quot;: ${__timeShift(yyyy,,-P365D,,)},&#xd;
        &quot;book_type&quot;:&quot;patent&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что в ответ получили ссылку на скачивание - https://${__lowercase(${__P(layer)})}-tochka15.bank24.int/api/v1/skrepka/s3/revenue_book/" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1956301459">{&quot;result&quot;: {&quot;url&quot;: &quot;https://${__lowercase(${__P(layer)})}-tochka15.bank24.int/api/v1/skrepka/s3/revenue_book/</stringProp>
                    <stringProp name="-461044731">{&quot;result&quot;: {&quot;url&quot;: &quot;null</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Валидация" enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Скачивание КУДиРа клиенту на ОСНО" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Скачивание КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Скачивание КУДиРа клиенту на ОСНО&quot;);   
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\n Для скачивания КУДиР используется метод [revenue_book](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book.md).&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); 


/*
 * to create case report with single step
 * do not use parameters start/continue/stop
 * and do not create variable AllureCaseName
 */</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">select oc.customer_code
	from orders_company oc  
where oc.closing_date is null and oc.is_active is true and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description like &apos;%ОСНО%&apos;)
order by random() limit 1;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;,&#xd;
        &quot;year&quot;: ${__time(yyyy)},&#xd;
        &quot;book_type&quot;: &quot;usn&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код  ошибки в ответе = revenue_book_feature_not_available" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..code</stringProp>
                  <stringProp name="EXPECTED_VALUE">revenue_book_feature_not_available</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код клиента в ответе" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..meta.customer_code</stringProp>
                  <stringProp name="EXPECTED_VALUE">${customer_code_1}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем что нет другого года в ответе" enabled="true">
                  <stringProp name="JSON_PATH">.result..year</stringProp>
                  <stringProp name="EXPECTED_VALUE">${__time(yyyy,)}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">true</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Скачивание КУДиРа за будующий год" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Скачивание КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Скачивание КУДиРа за будующий год&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); 
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\n Для скачивания КУДиР используется метод [revenue_book](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book.md).&quot;);

/*
 * to create case report with single step
 * do not use parameters start/continue/stop
 * and do not create variable AllureCaseName
 */</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">select oc.customer_code
	from orders_company oc  
where oc.closing_date is null and oc.is_active is true and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in 
		(&apos;ИП на УСН Доходы&apos;)) and oc.tax_calc_start_date = &apos;${__time(yyyy)}-01-01&apos;
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;,&#xd;
        &quot;year&quot;: ${__timeShift(yyyy,,P365D,,)} ,&#xd;
        &quot;book_type&quot;: &quot;usn&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код ошибки" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..code</stringProp>
                  <stringProp name="EXPECTED_VALUE">invalid_parameter</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем описание ошибки" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..message</stringProp>
                  <stringProp name="EXPECTED_VALUE">Not in range</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем причину ошибки" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..object_name</stringProp>
                  <stringProp name="EXPECTED_VALUE">year</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Скачивание КУДиРа для некорректного  кода клиента" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Скачивание КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Скачивание КУДиРа для некорректного  кода клиента&quot;);   
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); 
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\n Для скачивания КУДиР используется метод [revenue_book](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book.md).&quot;);

/*
 * to create case report with single step
 * do not use parameters start/continue/stop
 * and do not create variable AllureCaseName
 */</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">select oc.customer_code
	from orders_company oc  
where oc.closing_date is null and oc.is_active is true and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description like &apos;%ОСНО%&apos;)
order by random() limit 1;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}1&quot;,&#xd;
        &quot;year&quot;: ${__time(yyyy)},&#xd;
        &quot;book_type&quot;: &quot;usn&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код ошибки - customer_not_found" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..code</stringProp>
                  <stringProp name="EXPECTED_VALUE">customer_not_found</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем описание ошибки -  Customer not found" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..message</stringProp>
                  <stringProp name="EXPECTED_VALUE">Customer not found</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Скачивание КУДиРа с пустым кодом клиента" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Скачивание КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Скачивание КУДиРа с пустым кодом клиента&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); 
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\n Для скачивания КУДиР используется метод [revenue_book](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book.md).&quot;);

/*
 * to create case report with single step
 * do not use parameters start/continue/stop
 * and do not create variable AllureCaseName
 */</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;&quot;,&#xd;
        &quot;year&quot;: ${__timeShift(yyyy,,P365D,,)} ,&#xd;
        &quot;book_type&quot;: &quot;usn&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код ошибки - customer_not_found" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..code</stringProp>
                  <stringProp name="EXPECTED_VALUE">customer_not_found</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем описание ошибки -  Customer not found" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..message</stringProp>
                  <stringProp name="EXPECTED_VALUE">Customer not found</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Скачивание КУДиРа без кода клиента" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Скачивание КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Скачивание КУДиРа без кода клиента&quot;);   
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); 
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\n Для скачивания КУДиР используется метод [revenue_book](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book.md).&quot;);


/*
 * to create case report with single step
 * do not use parameters start/continue/stop
 * and do not create variable AllureCaseName
 */</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book&quot;,&#xd;
    &quot;params&quot;: { &#xd;
        &quot;year&quot;: ${__time(yyyy)},&#xd;
        &quot;book_type&quot;: &quot;usn&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код ошибки - value_error.missing" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..code</stringProp>
                  <stringProp name="EXPECTED_VALUE">value_error.missing</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем описание ошибки -  field required" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..message</stringProp>
                  <stringProp name="EXPECTED_VALUE">field required</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем место ошибки -  customer_code" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..object_name</stringProp>
                  <stringProp name="EXPECTED_VALUE">customer_code</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Скачивание КУДиРа с пустым годом" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Скачивание КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Скачивание КУДиРа с пустым годом&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); 
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\n Для скачивания КУДиР используется метод [revenue_book](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book.md).&quot;);

/*
 * to create case report with single step
 * do not use parameters start/continue/stop
 * and do not create variable AllureCaseName
 */</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">select oc.customer_code
	from orders_company oc  
where oc.closing_date is null and oc.is_active is true and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in 
		(&apos;ИП на УСН Доходы&apos;)) and oc.tax_calc_start_date = &apos;${__time(yyyy)}-01-01&apos;
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;,&#xd;
        &quot;year&quot;: ,&#xd;
        &quot;book_type&quot;: &quot;usn&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код ошибки - -32700" enabled="true">
                  <stringProp name="JSON_PATH">.error.code</stringProp>
                  <stringProp name="EXPECTED_VALUE">-32700</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем описание ошибки -  Parse error" enabled="true">
                  <stringProp name="JSON_PATH">.error.message</stringProp>
                  <stringProp name="EXPECTED_VALUE">Parse error</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Скачивание КУДиРа без года" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Скачивание КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Скачивание КУДиРа без года&quot;);   
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\n Для скачивания КУДиР используется метод [revenue_book](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book.md).&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); 


/*
 * to create case report with single step
 * do not use parameters start/continue/stop
 * and do not create variable AllureCaseName
 */</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">select oc.customer_code
	from orders_company oc  
where oc.closing_date is null and oc.is_active is true and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description like &apos;%ОСНО%&apos;)
order by random() limit 1;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;, &#xd;
        &quot;book_type&quot;: &quot;usn&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код ошибки - value_error.missing" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..code</stringProp>
                  <stringProp name="EXPECTED_VALUE">value_error.missing</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем описание ошибки -  field required" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..message</stringProp>
                  <stringProp name="EXPECTED_VALUE">field required</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем место ошибки -  year" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..object_name</stringProp>
                  <stringProp name="EXPECTED_VALUE">year</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Скачивание КУДиРа с пустым типом КУДиР" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Скачивание КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Скачивание КУДиРа с пустым типом КУДиР&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\n Для скачивания КУДиР используется метод [revenue_book](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book.md).&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); 

/*
 * to create case report with single step
 * do not use parameters start/continue/stop
 * and do not create variable AllureCaseName
 */</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">select oc.customer_code
	from orders_company oc  
where oc.closing_date is null and oc.is_active is true and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in 
		(&apos;ИП на УСН Доходы&apos;)) and oc.tax_calc_start_date = &apos;${__time(yyyy)}-01-01&apos;
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;,&#xd;
        &quot;year&quot;: ${__timeShift(yyyy,,P365D,,)} ,&#xd;
        &quot;book_type&quot;: &quot;&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код ошибки - revenue_book_invalid_type" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..code</stringProp>
                  <stringProp name="EXPECTED_VALUE">revenue_book_invalid_type</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем описание ошибки - Invalid type of revenue book" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..message</stringProp>
                  <stringProp name="EXPECTED_VALUE">Invalid type of revenue book</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Скачивание КУДиРа без типа КУДиР" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Скачивание КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Скачивание КУДиРа без типа КУДиР&quot;);  
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\n Для скачивания КУДиР используется метод [revenue_book](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book.md).&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;);  

/*
 * to create case report with single step
 * do not use parameters start/continue/stop
 * and do not create variable AllureCaseName
 */</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">select oc.customer_code
	from orders_company oc  
where oc.closing_date is null and oc.is_active is true and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in 
		(&apos;ИП на УСН Доходы&apos;)) and oc.tax_calc_start_date = &apos;${__time(yyyy)}-01-01&apos;
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;,&#xd;
        &quot;year&quot;: ${__time(yyyy)}&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что в ответ получили ссылку на скачивание" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1956301459">{&quot;result&quot;: {&quot;url&quot;: &quot;https://${__lowercase(${__P(layer)})}-tochka15.bank24.int/api/v1/skrepka/s3/revenue_book/</stringProp>
                    <stringProp name="-461044731">{&quot;result&quot;: {&quot;url&quot;: &quot;null</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Скачивание КУДиРа по патенту за год без патента" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;КУДиР&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Скачивание КУДиР&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Скачивание КУДиРа по патенту за год без патента&quot;);   
vars.put(&quot;AllureCaseDescription&quot;,&quot;КУДиР — Книга учета доходов и расходов обязательна для ИП и ООО на УСН. Книга учета отражает все операции, на основании которых считается налоговая база и платятся налоги. Если налог платится с дохода, то расход можно не отражать в документе. Если в расчете налогооблагаемой базы учитывается как доход, так и расход, то в книге отражаются все операции. \\nТак как КУДиР заполняется на основании выполненых операций, то он может быть сформирован за прошлые и текущий год.\\n Для скачивания КУДиР используется метод [revenue_book](https://gitlab.tochka-tech.com/tar/tar-api/-/blob/master/skrepka/t15_revenue_book.md).&quot;);
vars.put(&quot;AllureTestOwner&quot;,&quot;Нога Екатерина Владимировна&quot;); 

/*
 * to create case report with single step
 * do not use parameters start/continue/stop
 * and do not create variable AllureCaseName
 */</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем подходящего клиента в БД" enabled="true">
                <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
                <stringProp name="query">with st as (select oc.customer_code, array_agg(pp.deactivated) as deactivated
	from orders_company oc join patent_patent pp on oc.id =pp.company_id 
where  pp.start_date not BETWEEN &apos;${__timeShift(yyyy,,-P365D,,)}-01-01&apos; and &apos;${__timeShift(yyyy,,-P365D,,)}-12-31&apos;
and oc.closing_date is null and oc.is_active is true 
and oc.tax_regime_id in 
	(select id 
		from orders_taxregime ot
		where ot.description in 
		(&apos;ИП на УСН Доходы&apos;))
		group by oc.customer_code)
select *
from st
where  not(&apos;true&apos; =  any (deactivated))
order by random() limit 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code</stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем что запрос вернул не пустой ответ" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2043603940">customer_code
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start issues=[TAXDEV-611]</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрашиваем КУДиР" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;revenue_book&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;customer_code&quot;: &quot;${customer_code_1}&quot;,&#xd;
        &quot;year&quot;: ${__timeShift(yyyy,,-P365D,,)},&#xd;
        &quot;book_type&quot;:&quot;patent&quot;&#xd;
    }&#xd;
} </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(layer)}-skrepka.bank24.int</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v5/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">text_storage_get</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем код ошибки - invalid_parameter" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..code</stringProp>
                  <stringProp name="EXPECTED_VALUE">invalid_parameter</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем описание ошибки - Not in range" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..message</stringProp>
                  <stringProp name="EXPECTED_VALUE">Not in range</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Проверяем место ошибки - year" enabled="true">
                  <stringProp name="JSON_PATH">.error.data.errors..object_name</stringProp>
                  <stringProp name="EXPECTED_VALUE">year</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
