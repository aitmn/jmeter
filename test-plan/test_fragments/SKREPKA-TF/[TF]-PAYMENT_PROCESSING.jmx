<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="false"/>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Доходная операция без lastTransactionDate" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;Обработка события Payment&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Определение 71 поля по рублевым операциям&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Доходная операция без lastTransactionDate&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;Информацию о рублевых операциях мы получаем по событию payment.\\n\\nРаньше для определнеия calc_date используем значение postedDate, это колвировская дата валютирования. Если платёж создавался после окончания обмена (опер. дня), сначала мы списываем деньги со счета клиента на наш счёт незавершенки, а потом уже в новом опердне отправляем его, в таком случае postedDate отличается от даты, когда деньги стали не доступны клиенты ( и отличается от даты платежа в выписке клиента), соответственно мы сейчас можем учитывать операции клиента не той датой (особенно критично при смене налоговых периодов).\\n\\n Сейчас перешли на lastTransactionDate, которое соответствует полю 71 в платежном поручении.&quot;);
vars.put(&quot;AllureManualID&quot;,&quot;13618&quot;);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Находим активного клиента в базе скрепки" enabled="true">
            <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
            <stringProp name="query">select 
	oc.inn,
	oc.customer_code,
	oc.legal_short_name,
	oa.&quot;number&quot;,
	oa.bank_bic 
from orders_company oc
	inner join orders_account oa on oa.company_id  = oc.id
where oc.is_active  = &apos;true&apos;
order by random() limit 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">customer_tax_code,customer_code,customer_full_name,customer_account_code,customer_bic_code</stringProp>
          </JDBCSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Vars initial" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;customer_tax_code&quot;, &quot;${customer_tax_code_1}&quot;);
vars.put(&quot;customer_code&quot;, &quot;${customer_code_1}&quot;);
vars.put(&quot;customer_full_name&quot;, &quot;${customer_full_name_1}&quot;);
vars.put(&quot;customer_account_code&quot;, &quot;${customer_account_code_1}&quot;);
vars.put(&quot;customer_bic_code&quot;, &quot;${customer_bic_code_1}&quot;);
vars.put(&quot;customer_bank_correspondent_code&quot;,&quot;30101810845250000999&quot;);
vars.put(&quot;customer_bank_name&quot;,&quot;ТОЧКА ПАО БАНКА \&quot;ФК ОТКРЫТИЕ\&quot;&quot;);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename">${_allure_config_path}</stringProp>
              <stringProp name="parameters">start issues=[TAXDEV-178]</stringProp>
              <stringProp name="script"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Находим CBS - идентификатор счета в апибанке " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apibank-http.query.consul-${CONSUL_LAYER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v3/short/account/${customer_bic_code}/${customer_account_code}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">${APIBANKA_BASIC_STEPLER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="customer_account_key specific Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">customer_account_key</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.cbsKey</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename">${_allure_config_path}</stringProp>
              <stringProp name="parameters">continue</stringProp>
              <stringProp name="script"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Инициируем пришедший event по шине события Payment с отсутствующим полем lastTransactionDate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;delivery_mode&quot;: &quot;1&quot;,&#xd;
  &quot;headers&quot;: {&#xd;
    &quot;DOTBankCode&quot;: &quot;${customer_bic_code}&quot;,&#xd;
    &quot;DOTEventGuid&quot;: &quot;cbs-openqiwi-${__UUID()}&quot;,&#xd;
    &quot;DOTExtKey&quot;: &quot;3;${__Random(100000,999900,deepID)}&quot;,&#xd;
    &quot;DOTMsgFrom&quot;: &quot;cbs-openqiwi&quot;,&#xd;
    &quot;DOTMsgType&quot;: &quot;payment&quot;&#xd;
  },&#xd;
  &quot;name&quot;: &quot;amq.default&quot;,&#xd;
  &quot;payload&quot;: &quot;&#xd;
    &lt;event sender=\&quot;cbs-openqiwi\&quot; &#xd;
    refer=\&quot;cbs-openqiwi-${__UUID()}\&quot; &#xd;
    timestamp=\&quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,,)}.050+00:00\&quot; &#xd;
    type=\&quot;payment\&quot; &#xd;
    extkey=\&quot;3;${deepID}\&quot;&gt;  &#xd;
    &lt;payment &#xd;
        isBaseDocument=\&quot;true\&quot; &#xd;
        creationDate=\&quot;${__timeShift(yyyy-MM-dd,,,)}\&quot; &#xd;
        servicePayKey=\&quot;cbs-openqiwi-2;${deepID}\&quot; &#xd;
        cbs-key=\&quot;3;${deepID}\&quot; &#xd;
        cbs-correctdt=\&quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,,)}.050+00:00\&quot; &#xd;
        documentNumber=\&quot;${__Random(10000,20000,documentNumber)}\&quot; &#xd;
        documentDate=\&quot;${__timeShift(yyyy-MM-dd,,,)}\&quot; &#xd;
        postedDate=\&quot;${__timeShift(yyyy-MM-dd,,-P${__Random(1,9)}D,randomPostedDate)}\&quot; &#xd;
        transactionTypeCode=\&quot;01\&quot; &#xd;
        priority=\&quot;5\&quot; &#xd;
        refer=\&quot;6577768000190522000009207\&quot; &#xd;
        documentBankCode=\&quot;${customer_bic_code}\&quot; &#xd;
        cbs-process=\&quot;PSP_IN\&quot; &#xd;
        cbs-state=\&quot;FIN\&quot; &#xd;
        stateCode=\&quot;PAID\&quot;&gt;        &#xd;
        &lt;sidePayer&gt;      &#xd;
            &lt;bankCode&gt;044525161&lt;/bankCode&gt;      &#xd;
            &lt;bankName&gt;КБ ЛОКО-Банк (АО)&lt;/bankName&gt;      &#xd;
            &lt;bankCorrespondentAccount&gt;30101810945250000161&lt;/bankCorrespondentAccount&gt;      &#xd;
            &lt;account&gt;${customer_account_code}&lt;/account&gt;&#xd;
            &lt;name&gt;Test payer N1106451905&lt;/name&gt;     &#xd;
            &lt;amount&gt;${__Random(1000,9999,sum)}&lt;/amount&gt;  &#xd;
            &lt;currency&gt;RUB&lt;/currency&gt;      &#xd;
            &lt;taxCode&gt;7706092528&lt;/taxCode&gt;      &#xd;
            &lt;bankCity&gt;г. Москва&lt;/bankCity&gt;      &#xd;
            &lt;finInst&gt;external&lt;/finInst&gt;    &#xd;
        &lt;/sidePayer&gt;    &#xd;
        &lt;sideRecipient&gt;      &#xd;
            &lt;bankCode&gt;${customer_bic_code}&lt;/bankCode&gt;      &#xd;
            &lt;bankName&gt;ТОЧКА ПАО БАНКА ФК ОТКРЫТИЕ&lt;/bankName&gt;      &#xd;
            &lt;bankCorrespondentAccount&gt;${customer_bank_correspondent_code}&lt;/bankCorrespondentAccount&gt;      &#xd;
            &lt;account&gt;${customer_account_code}&lt;/account&gt;      &#xd;
            &lt;name&gt;${customer_full_name}&lt;/name&gt;      &#xd;
            &lt;amount&gt;${sum}&lt;/amount&gt;      &#xd;
            &lt;currency&gt;RUB&lt;/currency&gt;      &#xd;
            &lt;taxCode&gt;${customer_tax_code}&lt;/taxCode&gt;      &#xd;
            &lt;taxReasonCode&gt;null&lt;/taxReasonCode&gt;      &#xd;
            &lt;referencedAccountKey&gt;${customer_account_key}&lt;/referencedAccountKey&gt;      &#xd;
            &lt;bankCity&gt;г. Москва&lt;/bankCity&gt;      &#xd;
            &lt;finInst&gt;tochka&lt;/finInst&gt;    &#xd;
        &lt;/sideRecipient&gt;  &#xd;
        &lt;purpose&gt;&#xd;
            Тестовая доходная операция на ${sum}.00₽ без lastTransactionDate. postedDate = ${randomPostedDate}. calc_date заполнен по postedDate&#xd;
        &lt;/purpose&gt;&#xd;
    &lt;/payment&gt;&#xd;
&lt;/event&gt;&quot;,&#xd;
  &quot;payload_encoding&quot;: &quot;string&quot;,&#xd;
  &quot;properties&quot;: {&#xd;
    &quot;delivery_mode&quot;: 1&#xd;
  },&#xd;
  &quot;props&quot;: {},&#xd;
  &quot;routing_key&quot;: &quot;q_esb_incoming_events&quot;,&#xd;
  &quot;vhost&quot;: &quot;/&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__lowercase(${__P(layer)})}-skrepka-mq-dcdp.bank24.int</stringProp>
            <stringProp name="HTTPSampler.port">15672</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/exchanges/%2F/amq.default/publish</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP HeaderManager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">${SKREKPA_BASIC_MQ}</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Created from cURL on 2022-05-20T11:35:25.986528</stringProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename">${_allure_config_path}</stringProp>
              <stringProp name="parameters">continue</stringProp>
              <stringProp name="script"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Находим операцию в базе скрепки → ${SKREPKA_DB_URL}" enabled="true">
            <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
            <stringProp name="query">SELECT counterparty_date, calc_date, id from orders_bankorder ob 
	where account_id in (
			select id from orders_account oa 
				where &quot;number&quot;  = &apos;${customer_account_code}&apos;) 
		and &quot;number&quot;  = &apos;${documentNumber}&apos;
			order by created desc;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем counterparty_date и calc_date → заполнилось из поля postedDate события Payment " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1133894693">counterparty_date	calc_date	id
${randomPostedDate}	${randomPostedDate}	.*?</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename">${_allure_config_path}</stringProp>
              <stringProp name="parameters">stop</stringProp>
              <stringProp name="script"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Доходная операция с lastTransactionDate = postedDate" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;Обработка события Payment&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Определение 71 поля по рублевым операциям&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Расходная операция с lastTransactionDate = postedDate&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;Информацию о рублевых операциях мы получаем по событию payment.\\n\\nРаньше для определнеия calc_date используем значение postedDate, это колвировская дата валютирования. Если платёж создавался после окончания обмена (опер. дня), сначала мы списываем деньги со счета клиента на наш счёт незавершенки, а потом уже в новом опердне отправляем его, в таком случае postedDate отличается от даты, когда деньги стали не доступны клиенты ( и отличается от даты платежа в выписке клиента), соответственно мы сейчас можем учитывать операции клиента не той датой (особенно критично при смене налоговых периодов).\\n\\n Сейчас перешли на lastTransactionDate, которое соответствует полю 71 в платежном поручении.&quot;);
vars.put(&quot;AllureManualID&quot;,&quot;&quot;);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Находим активного клиента в базе скрепки" enabled="true">
            <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
            <stringProp name="query">select 
	oc.inn,
	oc.customer_code,
	oc.legal_short_name,
	oa.&quot;number&quot;,
	oa.bank_bic 
from orders_company oc
	inner join orders_account oa on oa.company_id  = oc.id
where oc.is_active  = &apos;true&apos;
order by random() limit 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">customer_tax_code,customer_code,customer_full_name,customer_account_code,customer_bic_code</stringProp>
          </JDBCSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Vars initial" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;customer_tax_code&quot;, &quot;${customer_tax_code_1}&quot;);
vars.put(&quot;customer_code&quot;, &quot;${customer_code_1}&quot;);
vars.put(&quot;customer_full_name&quot;, &quot;${customer_full_name_1}&quot;);
vars.put(&quot;customer_account_code&quot;, &quot;${customer_account_code_1}&quot;);
vars.put(&quot;customer_bic_code&quot;, &quot;${customer_bic_code_1}&quot;);
vars.put(&quot;customer_bank_correspondent_code&quot;,&quot;30101810845250000999&quot;);
vars.put(&quot;customer_bank_name&quot;,&quot;ТОЧКА ПАО БАНКА \&quot;ФК ОТКРЫТИЕ\&quot;&quot;);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename">${_allure_config_path}</stringProp>
              <stringProp name="parameters">start issues=[TAXDEV-178]</stringProp>
              <stringProp name="script"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Находим CBS - идентификатор счета в апибанке " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apibank-http.query.consul-${CONSUL_LAYER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v3/short/account/${customer_bic_code}/${customer_account_code}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">${APIBANKA_BASIC_STEPLER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="account_code specific Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">customer_account_key</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.cbsKey</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename">${_allure_config_path}</stringProp>
              <stringProp name="parameters">continue</stringProp>
              <stringProp name="script"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Инициируем пришедший event по шине события Payment с присутствующим полем lastTransactionDate = postedDate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;delivery_mode&quot;: &quot;1&quot;,&#xd;
  &quot;headers&quot;: {&#xd;
    &quot;DOTBankCode&quot;: &quot;${customer_bic_code}&quot;,&#xd;
    &quot;DOTEventGuid&quot;: &quot;cbs-openqiwi-${__UUID()}&quot;,&#xd;
    &quot;DOTExtKey&quot;: &quot;3;${__Random(100000,999900,deepID)}&quot;,&#xd;
    &quot;DOTMsgFrom&quot;: &quot;cbs-openqiwi&quot;,&#xd;
    &quot;DOTMsgType&quot;: &quot;payment&quot;&#xd;
  },&#xd;
  &quot;name&quot;: &quot;amq.default&quot;,&#xd;
  &quot;payload&quot;: &quot;&#xd;
    &lt;event sender=\&quot;cbs-openqiwi\&quot; &#xd;
    refer=\&quot;cbs-openqiwi-${__UUID()}\&quot; &#xd;
    timestamp=\&quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,,)}.050+00:00\&quot; &#xd;
    type=\&quot;payment\&quot; &#xd;
    extkey=\&quot;3;${deepID}\&quot;&gt;  &#xd;
    &lt;payment &#xd;
        isBaseDocument=\&quot;true\&quot; &#xd;
        creationDate=\&quot;${__timeShift(yyyy-MM-dd,,,)}\&quot; &#xd;
        servicePayKey=\&quot;cbs-openqiwi-2;${deepID}\&quot; &#xd;
        cbs-key=\&quot;3;${deepID}\&quot; &#xd;
        cbs-correctdt=\&quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,,)}.050+00:00\&quot; &#xd;
        documentNumber=\&quot;${__Random(19000,25000,documentNumber)}\&quot; &#xd;
        documentDate=\&quot;${__timeShift(yyyy-MM-dd,,,)}\&quot; &#xd;
        lastTransactionDate=\&quot;${__timeShift(yyyy-MM-dd,,-P${__Random(1,9)}D,lastTransactionDate)}\&quot;&#xd;
        postedDate=\&quot;${lastTransactionDate}\&quot; &#xd;
        transactionTypeCode=\&quot;01\&quot; &#xd;
        priority=\&quot;5\&quot; &#xd;
        refer=\&quot;6577768000190522000009207\&quot; &#xd;
        documentBankCode=\&quot;${customer_bic_code}\&quot; &#xd;
        cbs-process=\&quot;PAYDOC\&quot; &#xd;
        cbs-state=\&quot;STATE3\&quot; &#xd;
        stateCode=\&quot;PAID\&quot;&gt;&#xd;
	    &lt;sidePayer&gt;&#xd;
	      &lt;bankCode&gt;${customer_bic_code}&lt;/bankCode&gt;&#xd;
	      &lt;bankName&gt;ТОЧКА ПАО БАНКА ФК ОТКРЫТИЕ&lt;/bankName&gt;&#xd;
	      &lt;bankCorrespondentAccount&gt;${customer_bank_correspondent_code}&lt;/bankCorrespondentAccount&gt;&#xd;
	      &lt;account&gt;${customer_account_code}&lt;/account&gt;&#xd;
	      &lt;name&gt;Индивидуальный предприниматель Морозов Алексей Николаевич&lt;/name&gt;&#xd;
	      &lt;amount&gt;${__Random(1000,9999,sum)}&lt;/amount&gt;&#xd;
	      &lt;currency&gt;RUB&lt;/currency&gt;&#xd;
	      &lt;taxCode&gt;${customer_tax_code}&lt;/taxCode&gt;&#xd;
	      &lt;taxReasonCode&gt;0&lt;/taxReasonCode&gt;&#xd;
	      &lt;referencedAccountKey&gt;${customer_account_key}&lt;/referencedAccountKey&gt;&#xd;
	      &lt;bankCity&gt;г. Москва&lt;/bankCity&gt;&#xd;
	      &lt;finInst&gt;tochka&lt;/finInst&gt;&#xd;
	    &lt;/sidePayer&gt;  &#xd;
	    &lt;sideRecipient&gt;&#xd;
	      &lt;bankCode&gt;011403102&lt;/bankCode&gt;&#xd;
	      &lt;bankName&gt;ОТДЕЛЕНИЕ БЕЛГОРОД БАНКА РОССИИ&lt;/bankName&gt;&#xd;
	      &lt;bankCorrespondentAccount&gt;40102810745370000018&lt;/bankCorrespondentAccount&gt;&#xd;
	      &lt;account&gt;03100643000000012600&lt;/account&gt;&#xd;
	      &lt;name&gt;Управление Федерального казначейства по Белгородской области (Инспекция Федеральной налоговой службы по г.Белгороду)&lt;/name&gt;&#xd;
	      &lt;amount&gt;${sum}&lt;/amount&gt;&#xd;
	      &lt;currency&gt;RUB&lt;/currency&gt;&#xd;
	      &lt;taxCode&gt;3123021768&lt;/taxCode&gt;&#xd;
	      &lt;taxReasonCode&gt;312301001&lt;/taxReasonCode&gt;&#xd;
	      &lt;bankCity&gt;г. Белгород&lt;/bankCity&gt;&#xd;
	      &lt;finInst&gt;external&lt;/finInst&gt;&#xd;
	    &lt;/sideRecipient&gt;&#xd;
        &lt;purpose&gt;&#xd;
            Тестовая оплата взносов на ${sum}.00₽ lastTransactionDate = postedDate.lastTransactionDate = ${lastTransactionDate}. calc_date заполнен по lastTransactionDate&#xd;
        &lt;/purpose&gt;&#xd;
    &lt;/payment&gt;&#xd;
&lt;/event&gt;&quot;,&#xd;
  &quot;payload_encoding&quot;: &quot;string&quot;,&#xd;
  &quot;properties&quot;: {&#xd;
    &quot;delivery_mode&quot;: 1&#xd;
  },&#xd;
  &quot;props&quot;: {},&#xd;
  &quot;routing_key&quot;: &quot;q_esb_incoming_events&quot;,&#xd;
  &quot;vhost&quot;: &quot;/&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__lowercase(${__P(layer)})}-skrepka-mq-dcdp.bank24.int</stringProp>
            <stringProp name="HTTPSampler.port">15672</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/exchanges/%2F/amq.default/publish</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP HeaderManager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Basic c2tyZXBrYTpza3JlcGth</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Created from cURL on 2022-05-20T11:35:25.986528</stringProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename">${_allure_config_path}</stringProp>
              <stringProp name="parameters">continue</stringProp>
              <stringProp name="script"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Находим операцию в базе скрепки → ${SKREPKA_DB_URL}" enabled="true">
            <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
            <stringProp name="query">SELECT counterparty_date, calc_date, id from orders_bankorder ob 
	where account_id in (
			select id from orders_account oa 
				where &quot;number&quot;  = &apos;${customer_account_code}&apos;) 
		and &quot;number&quot;  = &apos;${documentNumber}&apos;
			order by created desc;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем counterparty_date и calc_date → заполнилось из поля lastTransactionDate события Payment " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="502700715">counterparty_date	calc_date	id
${lastTransactionDate}	${lastTransactionDate}	.*?</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename">${_allure_config_path}</stringProp>
              <stringProp name="parameters">stop</stringProp>
              <stringProp name="script"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Доходная операция с lastTransactionDate != postedDate" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;Обработка события Payment&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Определение 71 поля по рублевым операциям&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Расходная операция с lastTransactionDate != postedDate&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;Информацию о рублевых операциях мы получаем по событию payment.\\n\\nРаньше для определнеия calc_date используем значение postedDate, это колвировская дата валютирования. Если платёж создавался после окончания обмена (опер. дня), сначала мы списываем деньги со счета клиента на наш счёт незавершенки, а потом уже в новом опердне отправляем его, в таком случае postedDate отличается от даты, когда деньги стали не доступны клиенты ( и отличается от даты платежа в выписке клиента), соответственно мы сейчас можем учитывать операции клиента не той датой (особенно критично при смене налоговых периодов).\\n\\n Сейчас перешли на lastTransactionDate, которое соответствует полю 71 в платежном поручении.&quot;);
vars.put(&quot;AllureManualID&quot;,&quot;&quot;);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Находим активного клиента в базе скрепки" enabled="true">
            <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
            <stringProp name="query">select 
	oc.inn,
	oc.customer_code,
	oc.legal_short_name,
	oa.&quot;number&quot;,
	oa.bank_bic 
from orders_company oc
	inner join orders_account oa on oa.company_id  = oc.id
where oc.is_active  = &apos;true&apos;
order by random() limit 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">customer_tax_code,customer_code,customer_full_name,customer_account_code,customer_bic_code</stringProp>
          </JDBCSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Vars initial" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;customer_tax_code&quot;, &quot;${customer_tax_code_1}&quot;);
vars.put(&quot;customer_code&quot;, &quot;${customer_code_1}&quot;);
vars.put(&quot;customer_full_name&quot;, &quot;${customer_full_name_1}&quot;);
vars.put(&quot;customer_account_code&quot;, &quot;${customer_account_code_1}&quot;);
vars.put(&quot;customer_bic_code&quot;, &quot;${customer_bic_code_1}&quot;);
vars.put(&quot;customer_bank_correspondent_code&quot;,&quot;30101810845250000999&quot;);
vars.put(&quot;customer_bank_name&quot;,&quot;ТОЧКА ПАО БАНКА \&quot;ФК ОТКРЫТИЕ\&quot;&quot;);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename">${_allure_config_path}</stringProp>
              <stringProp name="parameters">start issues=[TAXDEV-178]</stringProp>
              <stringProp name="script"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Находим CBS - идентификатор счета в апибанке " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">apibank-http.query.consul-${CONSUL_LAYER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v3/short/account/${customer_bic_code}/${customer_account_code}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">${APIBANKA_BASIC_STEPLER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="account_code specific Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">customer_account_key</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">.cbsKey</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename">${_allure_config_path}</stringProp>
              <stringProp name="parameters">continue</stringProp>
              <stringProp name="script"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Инициируем пришедший event по шине события Payment с присутствующим полем lastTransactionDate != postedDate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;delivery_mode&quot;: &quot;1&quot;,&#xd;
  &quot;headers&quot;: {&#xd;
    &quot;DOTBankCode&quot;: &quot;${customer_bic_code}&quot;,&#xd;
    &quot;DOTEventGuid&quot;: &quot;cbs-openqiwi-${__UUID()}&quot;,&#xd;
    &quot;DOTExtKey&quot;: &quot;3;${__Random(100000,999900,deepID)}&quot;,&#xd;
    &quot;DOTMsgFrom&quot;: &quot;cbs-openqiwi&quot;,&#xd;
    &quot;DOTMsgType&quot;: &quot;payment&quot;&#xd;
  },&#xd;
  &quot;name&quot;: &quot;amq.default&quot;,&#xd;
  &quot;payload&quot;: &quot;&#xd;
    &lt;event sender=\&quot;cbs-openqiwi\&quot; &#xd;
    refer=\&quot;cbs-openqiwi-${__UUID()}\&quot; &#xd;
    timestamp=\&quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,,)}.050+00:00\&quot; &#xd;
    type=\&quot;payment\&quot; &#xd;
    extkey=\&quot;3;${deepID}\&quot;&gt;  &#xd;
    &lt;payment &#xd;
        isBaseDocument=\&quot;true\&quot; &#xd;
        creationDate=\&quot;${__timeShift(yyyy-MM-dd,,,)}\&quot; &#xd;
        servicePayKey=\&quot;cbs-openqiwi-2;${deepID}\&quot; &#xd;
        cbs-key=\&quot;3;${deepID}\&quot; &#xd;
        cbs-correctdt=\&quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,,)}.050+00:00\&quot; &#xd;
        documentNumber=\&quot;${__Random(19000,25000,documentNumber)}\&quot; &#xd;
        documentDate=\&quot;${__timeShift(yyyy-MM-dd,,,)}\&quot; &#xd;
        lastTransactionDate=\&quot;${__timeShift(yyyy-MM-dd,,-P${__Random(1,9)}D,lastTransactionDate)}\&quot;&#xd;
        postedDate=\&quot;${__timeShift(yyyy-MM-dd,,,)}\&quot; &#xd;
        transactionTypeCode=\&quot;01\&quot; &#xd;
        priority=\&quot;5\&quot; &#xd;
        refer=\&quot;6577768000190522000009207\&quot; &#xd;
        documentBankCode=\&quot;${customer_bic_code}\&quot; &#xd;
        cbs-process=\&quot;PAYDOC\&quot; &#xd;
        cbs-state=\&quot;STATE3\&quot; &#xd;
        stateCode=\&quot;PAID\&quot;&gt;&#xd;
	    &lt;sidePayer&gt;&#xd;
	      &lt;bankCode&gt;${customer_bic_code}&lt;/bankCode&gt;&#xd;
	      &lt;bankName&gt;ТОЧКА ПАО БАНКА ФК ОТКРЫТИЕ&lt;/bankName&gt;&#xd;
	      &lt;bankCorrespondentAccount&gt;${customer_bank_correspondent_code}&lt;/bankCorrespondentAccount&gt;&#xd;
	      &lt;account&gt;${customer_account_code}&lt;/account&gt;&#xd;
	      &lt;name&gt;Индивидуальный предприниматель Морозов Алексей Николаевич&lt;/name&gt;&#xd;
	      &lt;amount&gt;${__Random(1000,9999,sum)}&lt;/amount&gt;&#xd;
	      &lt;currency&gt;RUB&lt;/currency&gt;&#xd;
	      &lt;taxCode&gt;${customer_tax_code}&lt;/taxCode&gt;&#xd;
	      &lt;taxReasonCode&gt;0&lt;/taxReasonCode&gt;&#xd;
	      &lt;referencedAccountKey&gt;${customer_account_key}&lt;/referencedAccountKey&gt;&#xd;
	      &lt;bankCity&gt;г. Москва&lt;/bankCity&gt;&#xd;
	      &lt;finInst&gt;tochka&lt;/finInst&gt;&#xd;
	    &lt;/sidePayer&gt;  &#xd;
	    &lt;sideRecipient&gt;&#xd;
	      &lt;bankCode&gt;011403102&lt;/bankCode&gt;&#xd;
	      &lt;bankName&gt;ОТДЕЛЕНИЕ БЕЛГОРОД БАНКА РОССИИ&lt;/bankName&gt;&#xd;
	      &lt;bankCorrespondentAccount&gt;40102810745370000018&lt;/bankCorrespondentAccount&gt;&#xd;
	      &lt;account&gt;03100643000000012600&lt;/account&gt;&#xd;
	      &lt;name&gt;Управление Федерального казначейства по Белгородской области (Инспекция Федеральной налоговой службы по г.Белгороду)&lt;/name&gt;&#xd;
	      &lt;amount&gt;${sum}&lt;/amount&gt;&#xd;
	      &lt;currency&gt;RUB&lt;/currency&gt;&#xd;
	      &lt;taxCode&gt;3123021768&lt;/taxCode&gt;&#xd;
	      &lt;taxReasonCode&gt;312301001&lt;/taxReasonCode&gt;&#xd;
	      &lt;bankCity&gt;г. Белгород&lt;/bankCity&gt;&#xd;
	      &lt;finInst&gt;external&lt;/finInst&gt;&#xd;
	    &lt;/sideRecipient&gt;&#xd;
        &lt;purpose&gt;&#xd;
            Тестовая оплата взносов на ${sum}.00₽ lastTransactionDate != postedDate. lastTransactionDate = ${lastTransactionDate}. calc_date заполнен по lastTransactionDate&#xd;
        &lt;/purpose&gt;&#xd;
    &lt;/payment&gt;&#xd;
&lt;/event&gt;&quot;,&#xd;
  &quot;payload_encoding&quot;: &quot;string&quot;,&#xd;
  &quot;properties&quot;: {&#xd;
    &quot;delivery_mode&quot;: 1&#xd;
  },&#xd;
  &quot;props&quot;: {},&#xd;
  &quot;routing_key&quot;: &quot;q_esb_incoming_events&quot;,&#xd;
  &quot;vhost&quot;: &quot;/&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__lowercase(${__P(layer)})}-skrepka-mq-dcdp.bank24.int</stringProp>
            <stringProp name="HTTPSampler.port">15672</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/exchanges/%2F/amq.default/publish</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP HeaderManager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Basic c2tyZXBrYTpza3JlcGth</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Created from cURL on 2022-05-20T11:35:25.986528</stringProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename">${_allure_config_path}</stringProp>
              <stringProp name="parameters">continue</stringProp>
              <stringProp name="script"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Находим операцию в базе скрепки → ${SKREPKA_DB_URL}" enabled="true">
            <stringProp name="dataSource">SKREPKA_${__P(layer)}</stringProp>
            <stringProp name="query">SELECT counterparty_date, calc_date, id from orders_bankorder ob 
	where account_id in (
			select id from orders_account oa 
				where &quot;number&quot;  = &apos;${customer_account_code}&apos;) 
		and &quot;number&quot;  = &apos;${documentNumber}&apos;
			order by created desc;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">,,bankorder_id</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Проверяем counterparty_date и calc_date → заполнилось из поля lastTransactionDate события Payment " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="502700715">counterparty_date	calc_date	id
${lastTransactionDate}	${lastTransactionDate}	.*?</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Var bankorder_id initial" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;bankorder_id&quot;, &quot;${bankorder_id_1}&quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename">${_allure_config_path}</stringProp>
              <stringProp name="parameters">stop</stringProp>
              <stringProp name="script"></stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
