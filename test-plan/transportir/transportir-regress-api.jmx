<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="[TG]-TRANSPORTIR-REGRESS-THREAD-1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1539405648000</longProp>
        <longProp name="ThreadGroup.end_time">1539405648000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">transportir-web.query.consul-${CONSUL_LAYER}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">30000</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">true</boolProp>
        </CookieManager>
        <hashTree/>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="[TF]-DB-CONNECT" enabled="true">
          <stringProp name="IncludeController.includepath">[TF]-DB-CONNECT.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="[TF]-SET_ENVIRONMENT" enabled="true">
          <stringProp name="IncludeController.includepath">[TF]-SET_ENVIRONMENT.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="[TF]-GET_OAUTH_COOKIES" enabled="false">
          <stringProp name="IncludeController.includepath">[TF]-GET_OAUTH_COOKIES.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PRE-TF`s" enabled="false"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Получения клиентской сессии" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Первый метод авторизации" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;login&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;login&quot;: &quot;${login}&quot;,&#xd;
        &quot;password&quot;: &quot;12345&quot;,&#xd;
        &quot;channel&quot;: &quot;Bank20&quot;&#xd;
    },&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/auth/v2/public</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get auth_token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">auth_token; auth_method_token; otp_token; id;error_code</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.auth_token;$.result.data.auth_method_token;$.result.data.otp_token;$.id;$.error.code</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">auth_token</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND; NOT_FOUND; NOT_FOUND; NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If login OK" enabled="true">
              <stringProp name="IfController.condition">&quot;${auth_token}&quot;!=&quot;NOT_FOUND&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Второй метод авторизации" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
    &quot;method&quot;: &quot;method_verify&quot;,&#xd;
    &quot;params&quot;: {&#xd;
        &quot;auth_token&quot;: &quot;${auth_token}&quot;,&#xd;
        &quot;auth_method_token&quot;: &quot;${auth_method_token}&quot;,&#xd;
        &quot;otp_token&quot;: &quot;${otp_token}&quot;,&#xd;
        &quot;otp_password&quot;: &quot;12345&quot;,&#xd;
        &quot;resend&quot;: true&#xd;
    },&#xd;
    &quot;id&quot;: &quot;${__UUID()}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/v1/auth/v2/public</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout">300</stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get error.code" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">code</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.error.code</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <stringProp name="Scope.variable">auth_token</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get main_customer_code" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">customer_code_fiz</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.data.access_matrix.main_customer_code</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Scope.variable">auth_token</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If auth OK" enabled="true">
                <stringProp name="IfController.condition">&quot;${code}&quot;==&quot;NOT_FOUND&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Третий метод авторизации" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;message_v1&quot;: {&#xd;
        &quot;@type&quot;: &quot;request&quot;,&#xd;
        &quot;data&quot;: {&#xd;
            &quot;@trn_code&quot;: &quot;authorized_ping&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ws/do/authorized_ping</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-CSRF-TOKEN</stringProp>
                        <stringProp name="Header.value">${COOKIE_X-CSRF-TOKEN}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с полем address c типом int" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;customer_code&quot;: &quot;300015204&quot;,&#xd;
  &quot;trigger_name&quot;: &quot;NO_ACTUAL&quot;,&#xd;
  &quot;trigger_value&quot;: &quot;1&quot;&#xd;
}&#xd;
&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">cs-colvir-helper-app.service.consul-test</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/set_trigger</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Invalid shipping method&apos;" enabled="true">
            <stringProp name="JSON_PATH">.error.message</stringProp>
            <stringProp name="EXPECTED_VALUE">Invalid shipping method</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Удаляем заявку, восстанавливем изначальный статус заявки " enabled="true">
            <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
            <stringProp name="query">delete from claim where task_id = &apos;${task_id_for_change}&apos;;
update task set last_claim_status = &apos;${last_claim_status}&apos; where id = &apos;${task_id_for_change}&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Удаляем заявку из БД транспортира, чтобы не аффектило на следующие проверки" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">if (1 == 1){
	log.info(&quot;&quot;)
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename">${_allure_config_path}</stringProp>
            <stringProp name="parameters">continue</stringProp>
            <stringProp name="script"></stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TF`s" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Initial Random Address and Contact Name" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;random_address&quot;,&quot;${__chooseRandom(Сакко и Ванцетти д61, Москва Ленина дом 234, Челябинкс улица Уральская 87, Санкт-Петербург Шаумяна 3,Омск Никандрова 12,г Москва Алтуфьевское шоссе д 23Б,Сергиев Посад Ярославское шоссе д 63,г Пермь ул Уфалейская 1,г Якутск шоссе Окружное 4 км д2,г Волгоград Юбилейный пер д 3,г Калининград Балтийское шоссе д 4,Краснодарский край г Сочи пр-кт Пушкина д 8,КЕМЕРОВО г УЛЬЯНЫ ГРОМОВОЙ ул ДОМ 17,УФА г ПЕРВОМАЙСКАЯ ул д. 59,Чувашия ПОРЕЦКОЕ с ШКОЛЬНЫЙ пер ДОМ 5,)}&quot;);


vars.put(&quot;random_contact_name&quot;,&quot;${__chooseRandom(Бурдаков Сергей Кузьмич,Напольских Сергей Евгеньевич,Горбунов Александр Анатольевич,Алексеев Григорий Федорович,Тимонина Елена,Денисов Александр Витальевич,Муравьева Татьяна Владимировна,Навольский Андрей Богданович,Налбандян Инна Сергеевна,Шаляпина Елена Вячеславовна,Бобров Станислав Сергеевич,Айкашев Максим Юрьевич,Лавринченко Алексей Валерьевич,Могиленских Олег Вячеславович,Ковалев Александр Игоревич,)}&quot;);</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="TRANSPORTIR-TF/[TF]-TASKS" enabled="false">
            <stringProp name="IncludeController.includepath">TRANSPORTIR-TF/[TF]-TASKS.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="TRANSPORTIR-TF/[TF]-ADDRESS_CHECK_SHIPPING" enabled="false">
            <stringProp name="IncludeController.includepath">TRANSPORTIR-TF/[TF]-ADDRESS_CHECK_SHIPPING.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="TRANSPORTIR-TF/[TF]-CLAIM_CREATE_POST" enabled="false">
            <stringProp name="IncludeController.includepath">TRANSPORTIR-TF/[TF]-CLAIM_CREATE_POST.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Создание заявки на доставку документов курьером" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Валидация" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Валидация shipping_method" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;Создание заявки на доставку документов курьером или по почте&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Валидация запроса claim_create&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Валидация shipping_method при заказе курьера&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;&quot;);
vars.put(&quot;AllureManualID&quot;,&quot;&quot;);

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем клиента, у которого есть активная задача по доставке документов и созданное заявление на доставку" enabled="true">
                  <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
                  <stringProp name="query">select c.customer_code, t.last_claim_status, t.id from customer c 
	inner join task t on t.customer_id  = c.id
	where t.is_active = &apos;true&apos;
		and not exists (select 1 from claim c2 where c2.task_id = t.id)
	order by random() 
	limit 1 </stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames">customer_code,last_claim_status,task_id_for_change</stringProp>
                </JDBCSampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Vars initial" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">vars.put(&quot;customer_code&quot;, &quot;${customer_code_1}&quot;);
vars.put(&quot;last_claim_status&quot;, &quot;${last_claim_status_1}&quot;);
vars.put(&quot;task_id_for_change&quot;, &quot;${task_id_for_change_1}&quot;);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">start</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос на создание заявление на доставку с невалидным shipping_method" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;,&#xd;
    &quot;shipping_method&quot;: &quot;${__RandomString(10,abcdefghijklmnopqrstuvwxyz,)}&quot;,&#xd;
    &quot;source_address&quot;: &quot;&quot;,&#xd;
    &quot;contact_info&quot;: &quot;&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Invalid shipping method&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.message</stringProp>
                    <stringProp name="EXPECTED_VALUE">Invalid shipping method</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос на создание заявление на доставку с пустым shipping_method" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;,&#xd;
    &quot;shipping_method&quot;: &quot;&quot;,&#xd;
    &quot;source_address&quot;: &quot;&quot;,&#xd;
    &quot;contact_info&quot;: &quot;&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Invalid shipping method&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.message</stringProp>
                    <stringProp name="EXPECTED_VALUE">Invalid shipping method</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос на создание заявки доставки почтой, с заполнением как для курьера" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;pochta&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;Позвонить за 1 час, предупредить&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;date&quot;: &quot;${__timeShift(dd-MM-yyyy,,P1D,,)}&quot;,&#xd;
      &quot;time&quot;: &quot;${__timeShift(HH:mm,,,,)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Server error&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.message</stringProp>
                    <stringProp name="EXPECTED_VALUE">Server error</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;KeyError: &apos;zipcode&apos;&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.data</stringProp>
                    <stringProp name="EXPECTED_VALUE">KeyError: &apos;zipcode&apos;</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос на создание заявки доставки курьером, с shipping_method апкейсом" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;YANDEX&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;Позвонить за 1 час, предупредить&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;date&quot;: &quot;${__timeShift(dd-MM-yyyy,,P1D,,)}&quot;,&#xd;
      &quot;time&quot;: &quot;${__timeShift(HH:mm,,,,)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Invalid shipping method&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.message</stringProp>
                    <stringProp name="EXPECTED_VALUE">Invalid shipping method</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос на создание заявки доставки курьером, с shipping_method type = boolean" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: true,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;Позвонить за 1 час, предупредить&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;date&quot;: &quot;${__timeShift(dd-MM-yyyy,,P1D,,)}&quot;,&#xd;
      &quot;time&quot;: &quot;${__timeShift(HH:mm,,,,)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Invalid shipping method&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.message</stringProp>
                    <stringProp name="EXPECTED_VALUE">Invalid shipping method</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Удаляем заявку, восстанавливем изначальный статус заявки " enabled="true">
                  <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
                  <stringProp name="query">delete from claim where task_id = &apos;${task_id_for_change}&apos;;
update task set last_claim_status = &apos;${last_claim_status}&apos; where id = &apos;${task_id_for_change}&apos;;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCSampler>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Update Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-234430262">updates</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">stop</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Валидация source_address" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;Создание заявки на доставку документов курьером или по почте&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Валидация запроса claim_create&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Валидация source_address при заказе курьера&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;&quot;);
vars.put(&quot;AllureManualID&quot;,&quot;&quot;);

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем клиента, у которого есть активная задача по доставке документов и созданное заявление на доставку" enabled="true">
                  <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
                  <stringProp name="query">select c.customer_code, t.last_claim_status, t.id from customer c 
	inner join task t on t.customer_id  = c.id
	where t.is_active = &apos;true&apos;
		and not exists (select 1 from claim c2 where c2.task_id = t.id)
	order by random() 
	limit 1 </stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames">customer_code,last_claim_status,task_id_for_change</stringProp>
                </JDBCSampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Vars initial" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">vars.put(&quot;customer_code&quot;, &quot;${customer_code_1}&quot;);
vars.put(&quot;last_claim_status&quot;, &quot;${last_claim_status_1}&quot;);
vars.put(&quot;task_id_for_change&quot;, &quot;${task_id_for_change_1}&quot;);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">start</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с отсутствующим полем address" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;Позвонить за 1 час, предупредить&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Server error&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.message</stringProp>
                    <stringProp name="EXPECTED_VALUE">Server error</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.data → &apos;KeyError: &apos;address&apos;&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.data</stringProp>
                    <stringProp name="EXPECTED_VALUE">KeyError: &apos;address&apos;</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Удаляем заявку, восстанавливем изначальный статус заявки " enabled="true">
                    <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
                    <stringProp name="query">delete from claim where task_id = &apos;${task_id_for_change}&apos;;
update task set last_claim_status = &apos;${last_claim_status}&apos; where id = &apos;${task_id_for_change}&apos;;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                  </JDBCPostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Удаляем заявку из БД транспортира, чтобы не аффектило на следующие проверки" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">if (1 == 1){
	prev.setSuccessful(true);
}</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с отсутствующим полем flat" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;Позвонить за 1 час, предупредить&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .result → &apos;true&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.result</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Удаляем заявку, восстанавливем изначальный статус заявки " enabled="true">
                    <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
                    <stringProp name="query">delete from claim where task_id = &apos;${task_id_for_change}&apos;;
update task set last_claim_status = &apos;${last_claim_status}&apos; where id = &apos;${task_id_for_change}&apos;;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                  </JDBCPostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Удаляем заявку из БД транспортира, чтобы не аффектило на следующие проверки" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">if (1 == 1){
	prev.setSuccessful(true);
}</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с отсутствующим полем porch" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;Позвонить за 1 час, предупредить&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .result → &apos;true&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.result</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Удаляем заявку, восстанавливем изначальный статус заявки " enabled="true">
                    <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
                    <stringProp name="query">delete from claim where task_id = &apos;${task_id_for_change}&apos;;
update task set last_claim_status = &apos;${last_claim_status}&apos; where id = &apos;${task_id_for_change}&apos;;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                  </JDBCPostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Удаляем заявку из БД транспортира, чтобы не аффектило на следующие проверки" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">if (1 == 1){
	prev.setSuccessful(true);
}</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с отсутствующим полем floor" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;Позвонить за 1 час, предупредить&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .result → &apos;true&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.result</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Удаляем заявку, восстанавливем изначальный статус заявки " enabled="true">
                    <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
                    <stringProp name="query">delete from claim where task_id = &apos;${task_id_for_change}&apos;;
update task set last_claim_status = &apos;${last_claim_status}&apos; where id = &apos;${task_id_for_change}&apos;;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                  </JDBCPostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Удаляем заявку из БД транспортира, чтобы не аффектило на следующие проверки" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">if (1 == 1){
	prev.setSuccessful(true);
}</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с отсутствующим полем door_code" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;Позвонить за 1 час, предупредить&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .result → &apos;true&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.result</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Удаляем заявку, восстанавливем изначальный статус заявки " enabled="true">
                    <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
                    <stringProp name="query">delete from claim where task_id = &apos;${task_id_for_change}&apos;;
update task set last_claim_status = &apos;${last_claim_status}&apos; where id = &apos;${task_id_for_change}&apos;;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                  </JDBCPostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Удаляем заявку из БД транспортира, чтобы не аффектило на следующие проверки" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">if (1 == 1){
	prev.setSuccessful(true);
}</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с полем comment с длиной &gt; 257" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;${__RandomString(257,qwertyuiopasdfghjklzxcvbnm йцукенгшщзфывапролдячсмить 1234567890)}&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .result → &apos;true&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.result</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Удаляем заявку, восстанавливем изначальный статус заявки " enabled="true">
                    <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
                    <stringProp name="query">delete from claim where task_id = &apos;${task_id_for_change}&apos;;
update task set last_claim_status = &apos;${last_claim_status}&apos; where id = &apos;${task_id_for_change}&apos;;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                  </JDBCPostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Удаляем заявку из БД транспортира, чтобы не аффектило на следующие проверки" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">if (1 == 1){
	prev.setSuccessful(true);
}</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с отсутствующим полем comment" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .result → &apos;true&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.result</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Удаляем заявку, восстанавливем изначальный статус заявки " enabled="true">
                    <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
                    <stringProp name="query">delete from claim where task_id = &apos;${task_id_for_change}&apos;;
update task set last_claim_status = &apos;${last_claim_status}&apos; where id = &apos;${task_id_for_change}&apos;;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                  </JDBCPostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Удаляем заявку из БД транспортира, чтобы не аффектило на следующие проверки" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">if (1 == 1){
	prev.setSuccessful(true);
}</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с отсутствующими полями flat,porch,floor,door_code,comment" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .result → &apos;true&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.result</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Удаляем заявку, восстанавливем изначальный статус заявки " enabled="true">
                    <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
                    <stringProp name="query">delete from claim where task_id = &apos;${task_id_for_change}&apos;;
update task set last_claim_status = &apos;${last_claim_status}&apos; where id = &apos;${task_id_for_change}&apos;;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                  </JDBCPostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Удаляем заявку из БД транспортира, чтобы не аффектило на следующие проверки" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">if (1 == 1){
	prev.setSuccessful(true);
}</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с отсутствующим полем location" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;Позвонить за 1 час, предупредить&quot;&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Server error&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.message</stringProp>
                    <stringProp name="EXPECTED_VALUE">Server error</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.data → &apos;KeyError: &apos;location&apos;&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.data</stringProp>
                    <stringProp name="EXPECTED_VALUE">KeyError: &apos;location&apos;</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">stop</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Валидация contact_info" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;Создание заявки на доставку документов курьером или по почте&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Валидация запроса claim_create&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Валидация contact_info при заказе курьера&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;&quot;);
vars.put(&quot;AllureManualID&quot;,&quot;&quot;);

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем клиента, у которого есть активная задача по доставке документов и созданное заявление на доставку" enabled="true">
                  <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
                  <stringProp name="query">select c.customer_code, t.last_claim_status, t.id from customer c 
	inner join task t on t.customer_id  = c.id
	where t.is_active = &apos;true&apos;
		and not exists (select 1 from claim c2 where c2.task_id = t.id)
	order by random() 
	limit 1 </stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames">customer_code,last_claim_status,task_id_for_change</stringProp>
                </JDBCSampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Vars initial" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">vars.put(&quot;customer_code&quot;, &quot;${customer_code_1}&quot;);
vars.put(&quot;last_claim_status&quot;, &quot;${last_claim_status_1}&quot;);
vars.put(&quot;task_id_for_change&quot;, &quot;${task_id_for_change_1}&quot;);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">start</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с отсутствуеющим полем fullname" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;${__RandomString(10,qwertyuiopasdfghjklzxcvbnm йцукенгшщзфывапролдячсмить 1234567890)}&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Server error&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.message</stringProp>
                    <stringProp name="EXPECTED_VALUE">Server error</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.data → &apos;KeyError: &apos;fullname&apos;&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.data</stringProp>
                    <stringProp name="EXPECTED_VALUE">KeyError: &apos;fullname&apos;</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с отсутствующим полем phone" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;${__RandomString(10,qwertyuiopasdfghjklzxcvbnm йцукенгшщзфывапролдячсмить 1234567890)}&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Server error&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.message</stringProp>
                    <stringProp name="EXPECTED_VALUE">Server error</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.data → &apos;KeyError: &apos;phone&apos;&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.data</stringProp>
                    <stringProp name="EXPECTED_VALUE">KeyError: &apos;phone&apos;</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с невалидным полем phone" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;${__RandomString(10,qwertyuiopasdfghjklzxcvbnm йцукенгшщзфывапролдячсмить 1234567890)}&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(20,1234567890,randomPhone)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Server error&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.message</stringProp>
                    <stringProp name="EXPECTED_VALUE">Server error</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.data → &apos;ValidationError: phone: Length of &apos;${randomPhone}&apos; 22 &gt; 20&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.data</stringProp>
                    <stringProp name="EXPECTED_VALUE">ValidationError: phone: Length of &apos;79${randomPhone}&apos; 22 &gt; 20</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с пустым полем phone" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;${__RandomString(10,qwertyuiopasdfghjklzxcvbnm йцукенгшщзфывапролдячсмить 1234567890)}&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Server error&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.message</stringProp>
                    <stringProp name="EXPECTED_VALUE">Server error</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.data → &apos;ValidationError: phone: Length of &apos;&apos; 0&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.data</stringProp>
                    <stringProp name="EXPECTED_VALUE">ValidationError: phone: Length of &apos;&apos; 0</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Удаляем заявку, восстанавливем изначальный статус заявки " enabled="true">
                    <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
                    <stringProp name="query">delete from claim where task_id = &apos;${task_id_for_change}&apos;;
update task set last_claim_status = &apos;${last_claim_status}&apos; where id = &apos;${task_id_for_change}&apos;;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                  </JDBCPostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Удаляем заявку из БД транспортира, чтобы не аффектило на следующие проверки" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">if (1 == 1){
	log.info(&quot;&quot;)
}</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с отсутствуеющим полем due" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;${__RandomString(10,qwertyuiopasdfghjklzxcvbnm йцукенгшщзфывапролдячсмить 1234567890)}&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Server error&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.message</stringProp>
                    <stringProp name="EXPECTED_VALUE">Server error</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.data → &apos;KeyError: &apos;due&apos;&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.data</stringProp>
                    <stringProp name="EXPECTED_VALUE">KeyError: &apos;due&apos;</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с пустым полем due" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;${__RandomString(10,qwertyuiopasdfghjklzxcvbnm йцукенгшщзфывапролдячсмить 1234567890)}&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;due&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Server error&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.message</stringProp>
                    <stringProp name="EXPECTED_VALUE">Server error</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.data → &apos;ValueError: time data &apos;&apos; does not match format &apos;%Y-%m-%dT%H:%M:%S%z&apos;&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.data</stringProp>
                    <stringProp name="EXPECTED_VALUE">ValueError: time data &apos;&apos; does not match format &apos;%Y-%m-%dT%H:%M:%S%z&apos;</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с невалидным полем due" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;${__RandomString(10,qwertyuiopasdfghjklzxcvbnm йцукенгшщзфывапролдячсмить 1234567890)}&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(dd-MM-yyyy HH:mm:ss,,P1D,,tomorrowDate)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Server error&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.message</stringProp>
                    <stringProp name="EXPECTED_VALUE">Server error</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.data → &apos;ValueError: time data &apos;${tomorrowDate}&apos; does not match format &apos;%Y-%m-%dT%H:%M:%S%z&apos;&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.data</stringProp>
                    <stringProp name="EXPECTED_VALUE">ValueError: time data &apos;${tomorrowDate}&apos; does not match format &apos;%Y-%m-%dT%H:%M:%S%z&apos;</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">stop</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Валидация customer_code" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;Создание заявки на доставку документов курьером или по почте&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Валидация запроса claim_create&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Валидация customer_code при заказе курьера&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;&quot;);
vars.put(&quot;AllureManualID&quot;,&quot;&quot;);

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем клиента, у которого есть активная задача по доставке документов и созданное заявление на доставку" enabled="true">
                  <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
                  <stringProp name="query">select c.customer_code, t.last_claim_status, t.id from customer c 
	inner join task t on t.customer_id  = c.id
	where t.is_active = &apos;true&apos;
		and not exists (select 1 from claim c2 where c2.task_id = t.id)
	order by random() 
	limit 1 </stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames">customer_code,last_claim_status,task_id_for_change</stringProp>
                </JDBCSampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Vars initial" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">vars.put(&quot;customer_code&quot;, &quot;${customer_code_1}&quot;);
vars.put(&quot;last_claim_status&quot;, &quot;${last_claim_status_1}&quot;);
vars.put(&quot;task_id_for_change&quot;, &quot;${task_id_for_change_1}&quot;);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">start</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с невалидным customer_code (больше 9)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;${__RandomString(10,qwertyuiopasdfghjklzxcvbnm йцукенгшщзфывапролдячсмить 1234567890)}&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}1&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Server error&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.message</stringProp>
                    <stringProp name="EXPECTED_VALUE">Server error</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.data → &apos;ValidationError: customer_code: Length of &apos;${customer_code}1&apos; 10 &gt; 9&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.data</stringProp>
                    <stringProp name="EXPECTED_VALUE">ValidationError: customer_code: Length of &apos;${customer_code}1&apos; 10 &gt; 9</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с отсутствующим полем customer_code" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;${__RandomString(10,qwertyuiopasdfghjklzxcvbnm йцукенгшщзфывапролдячсмить 1234567890)}&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Invalid parameters&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.message</stringProp>
                    <stringProp name="EXPECTED_VALUE">Invalid parameters</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.data → &apos;missing a required argument: &apos;customer_code&apos;&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.data</stringProp>
                    <stringProp name="EXPECTED_VALUE">missing a required argument: &apos;customer_code&apos;</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос с невалидным customer_code (больше 9)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;floor&quot;: &quot;${__Random(1,24)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;${__RandomString(10,qwertyuiopasdfghjklzxcvbnm йцукенгшщзфывапролдячсмить 1234567890)}&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${__substring(${customer_code}, 0, 8)}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Customer not found&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.message</stringProp>
                    <stringProp name="EXPECTED_VALUE">Customer not found</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">stop</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Уже есть заявление на доставку документов" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;Создание заявки на доставку документов курьером или по почте&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Валидация запроса claim_create&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Повторное создание заявление на отправку документов курьером&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;&quot;);
vars.put(&quot;AllureManualID&quot;,&quot;&quot;);

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем клиента, у которого есть активная задача по доставке документов и нет созданного заявления на доставку" enabled="true">
                  <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
                  <stringProp name="query">select c.customer_code, t.last_claim_status, t.id from customer c 
	inner join task t on t.customer_id  = c.id
	where t.is_active = &apos;true&apos;
		and not exists (select 1 from claim c2 where c2.task_id = t.id)
	order by random() 
	limit 1 </stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames">customer_code,last_claim_status,task_id_for_change</stringProp>
                </JDBCSampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Vars initial" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">vars.put(&quot;customer_code&quot;, &quot;${customer_code_1}&quot;);
vars.put(&quot;last_claim_status&quot;, &quot;${last_claim_status_1}&quot;);
vars.put(&quot;task_id_for_change&quot;, &quot;${task_id_for_change_1}&quot;);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">start</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос на создание заявки по доставке" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;Позвонить за 1 час, предупредить&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .result → &apos;true&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.result</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">continue</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Повторный запрос на создание заявки на доставку" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;Позвонить за 1 час, предупредить&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Claim already exists&apos;" enabled="true">
                    <stringProp name="JSON_PATH">.error.message</stringProp>
                    <stringProp name="EXPECTED_VALUE">Claim already exists</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Удаляем заявку, восстанавливем изначальный статус заявки " enabled="true">
                    <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
                    <stringProp name="query">delete from claim where task_id = &apos;${task_id_for_change}&apos;;
update task set last_claim_status = &apos;${last_claim_status}&apos; where id = &apos;${task_id_for_change}&apos;;</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                  </JDBCPostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Удаляем заявку из БД транспортира, чтобы не аффектило на следующие проверки" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">if (1 == 1){
	prev.setSuccessful(true);
}</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename">${_allure_config_path}</stringProp>
                    <stringProp name="parameters">stop</stringProp>
                    <stringProp name="script"></stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Позитивное создание заявки курьером" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Declare allure annotations" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;AllureFeature&quot;,&quot;Создание заявки на доставку документов курьером или по почте&quot;);
vars.put(&quot;AllureStory&quot;,&quot;Позитив&quot;);
vars.put(&quot;AllureCaseName&quot;,&quot;Позитивная заявка на создание заявки доставки курьером&quot;);
vars.put(&quot;AllureCaseDescription&quot;,&quot;&quot;);
vars.put(&quot;AllureManualID&quot;,&quot;&quot;);

</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Ищем клиента, у которого есть активная задача по доставке документов и нет созданного заявления на доставку" enabled="true">
                <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
                <stringProp name="query">select c.customer_code, t.last_claim_status, t.id from customer c 
	inner join task t on t.customer_id  = c.id
	where t.is_active = &apos;true&apos;
		and not exists (select 1 from claim c2 where c2.task_id = t.id)
	order by random() 
	limit 1 </stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">customer_code,last_claim_status,task_id_for_change</stringProp>
              </JDBCSampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Vars initial" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">vars.put(&quot;customer_code&quot;, &quot;${customer_code_1}&quot;);
vars.put(&quot;last_claim_status&quot;, &quot;${last_claim_status_1}&quot;);
vars.put(&quot;task_id_for_change&quot;, &quot;${task_id_for_change_1}&quot;);</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">start</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Запрос на создание заявки по доставке" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;Позвонить за 1 час, предупредить&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .result → &apos;true&apos;" enabled="true">
                  <stringProp name="JSON_PATH">.result</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">continue</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Повторный запрос на создание заявки на доставку" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${__UUID()}&quot;,&#xd;
  &quot;jsonrpc&quot;: &quot;2.0&quot;,&#xd;
  &quot;method&quot;: &quot;claim_create&quot;,&#xd;
  &quot;params&quot;: {&#xd;
    &quot;shipping_method&quot;: &quot;yandex&quot;,&#xd;
    &quot;source_address&quot;: {&#xd;
      &quot;address&quot;: &quot;г Екатеринбург, ул Малышева, д ${__Random(1,100)}&quot;,&#xd;
      &quot;flat&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;porch&quot;: &quot;${__Random(1,13)}&quot;,&#xd;
      &quot;door_code&quot;: &quot;${__Random(1,100)}&quot;,&#xd;
      &quot;comment&quot;: &quot;Позвонить за 1 час, предупредить&quot;,&#xd;
      &quot;location&quot;: [&#xd;
        56.831467,&#xd;
        60.580945&#xd;
      ]&#xd;
    },&#xd;
    &quot;contact_info&quot;: {&#xd;
      &quot;fullname&quot;: &quot;Денис Харрасович&quot;,&#xd;
      &quot;phone&quot;: &quot;+79${__RandomString(9,1234567890)}&quot;,&#xd;
      &quot;due&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+03:00&apos;,,P1D,,)}&quot;&#xd;
    },&#xd;
    &quot;customer_code&quot;: &quot;${customer_code}&quot;&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/v1/jsonrpc</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore != 200 status code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings"/>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion .error.message → &apos;Claim already exists&apos;" enabled="true">
                  <stringProp name="JSON_PATH">.error.message</stringProp>
                  <stringProp name="EXPECTED_VALUE">Claim already exists</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Удаляем заявку, восстанавливем изначальный статус заявки " enabled="true">
                  <stringProp name="dataSource">TRANSPORTIR_${__P(layer)}</stringProp>
                  <stringProp name="query">delete from claim where task_id = &apos;${task_id_for_change}&apos;;
update task set last_claim_status = &apos;${last_claim_status}&apos; where id = &apos;${task_id_for_change}&apos;;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Удаляем заявку из БД транспортира, чтобы не аффектило на следующие проверки" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (1 == 1){
	prev.setSuccessful(true);
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Allure.log.info" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename">${_allure_config_path}</stringProp>
                  <stringProp name="parameters">stop</stringProp>
                  <stringProp name="script"></stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
